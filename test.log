============================= test session starts =============================
platform win32 -- Python 3.8.8, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: A:\pyCGM
collected 1077 items

pyCGM_Single\tests\test_Pipelines.py ................................... [  3%]
....FFFFFF......FFFFF...................                                 [  6%]
pyCGM_Single\tests\test_clusterCalc.py ......                            [  7%]
pyCGM_Single\tests\test_csvOutput.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 10%]
FFFFFFFFFFF..F..FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF..F..FFFFFFFFFFFF.F [ 17%]
..F.........F.....................                                       [ 20%]
pyCGM_Single\tests\test_pycgmCalc.py FFFFF.....FF....F                   [ 22%]
pyCGM_Single\tests\test_pycgmIO.py ..................................... [ 25%]
...............................FFFFF..............                       [ 30%]
pyCGM_Single\tests\test_pycgmKinetics.py ......F.....                    [ 31%]
pyCGM_Single\tests\test_pycgmStatic_axis.py ............................ [ 33%]
........................................................................ [ 40%]
..............................................................           [ 46%]
pyCGM_Single\tests\test_pycgmStatic_utils.py ........................... [ 48%]
........................................................................ [ 55%]
........................................................................ [ 62%]
............................F.                                           [ 65%]
pyCGM_Single\tests\test_pycgm_angle.py ................................. [ 68%]
........................................................................ [ 74%]
...............                                                          [ 76%]
pyCGM_Single\tests\test_pycgm_axis.py .................................. [ 79%]
........................................................................ [ 86%]
........................................................................ [ 92%]
........                                                                 [ 93%]
pyCGM_Single\tests\test_pycgm_utils.py ................................. [ 96%]
.....................................                                    [100%]

================================== FAILURES ===================================
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables0-0-expected_result0] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x0000023762C69D00>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = 0
expected_result = [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00244312
E       Max relative difference: 3.56159456e-06
E        x: array([-1007.81443125,    71.2843969 ,  1522.6601575 ])
E        y: array([-1007.81456782,    71.28465079,  1522.66260062])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables1-1-expected_result1] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x00000237662C85E0>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = 1
expected_result = [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00244367
E       Max relative difference: 3.62772004e-06
E        x: array([-1007.73563036,    71.30541731,  1522.60319088])
E        y: array([-1007.73577975,    71.30567599,  1522.60563455])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables2-2-expected_result2] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x00000237662BB850>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = 2
expected_result = [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00244581
E       Max relative difference: 3.49075541e-06
E        x: array([-1007.65603807,    71.32619363,  1522.54923296])
E        y: array([-1007.65617725,    71.32644262,  1522.55167878])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables3--1-expected_result3] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x0000023774225580>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = -1
expected_result = [710.8111428914814, -18.282265916438064, 1549.7284035675332]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00243696
E       Max relative difference: 5.90179684e-06
E        x: array([ 710.81145811,  -18.28237381, 1549.7259666 ])
E        y: array([ 710.81114289,  -18.28226592, 1549.72840357])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables4-10-expected_result4] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x000002377423A670>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = 10
expected_result = [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00244375
E       Max relative difference: 3.43800657e-06
E        x: array([-1006.99148234,    71.48457811,  1522.23431885])
E        y: array([-1006.99162849,    71.48482388,  1522.2367626 ])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_static_SampleData[LFHD-useables5-100-expected_result5] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x00000237662C80D0>
key = 'LFHD', useables = ['RFHD', 'RBHD', 'LBHD'], s = 100
expected_result = [-995.8183141045178, 73.11905329024174, 1526.9072499889455]

    @pytest.mark.parametrize("key, useables, s, expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 0,
        [-1007.8145678233541, 71.28465078977477, 1522.6626006179151]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 1,
        [-1007.7357797476452, 71.30567599088612, 1522.6056345492811]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 2,
        [-1007.6561772477821, 71.32644261551039, 1522.5516787767372]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], -1,
        [710.8111428914814, -18.282265916438064, 1549.7284035675332]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 10,
        [-1006.9916284913861, 71.48482387826286, 1522.2367625952083]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 100,
        [-995.8183141045178, 73.11905329024174, 1526.9072499889455]),
    ])
    def test_transform_from_static_SampleData(self, key, useables, s, expected_result):
        """
        This function tests Pipelines.transform_from_static(data,static,key,useables,s),
        where data is an array of dictionaries of marker data,
        static is an array of static marker data, key is the name of the
        missing marker to perform gap filling for,
        useables is a list of markers in the same cluster as key,
        and s is the frame number that the marker data is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        static = self.static
        #Clear given key and frame to test gap filling
        data[key][s] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_static(data,static,key,useables,s)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00245137
E       Max relative difference: 2.74590636e-06
E        x: array([-995.81822077,   73.11885251, 1526.90479862])
E        y: array([-995.8183141 ,   73.11905329, 1526.90724999])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:352: AssertionError
_ TestPipelinesGapFilling.test_transform_from_mov_SampleData[LFHD-clust0-3-11-expected_result0] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x0000023773B1E100>
key = 'LFHD', clust = ['RFHD', 'RBHD', 'LBHD'], last_time = 3, i = 11
expected_result = [-1002.66354241, 81.22543097, 1521.82434027]

    @pytest.mark.parametrize("key,clust,last_time,i,expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 11,
        [-1002.66354241,    81.22543097,  1521.82434027]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 12,
        [-1002.57542092,    81.24378237,  1521.80517086]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, -1,
        [714.4191660275219, -8.268045936969543, 1550.088229312965]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 15,
        [-1002.30681304,    81.29768863,  1521.76708531]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 100,
        [-991.7315609567293, 82.91868701883672, 1526.597213251877]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 15, 16,
        [np.nan, np.nan, np.nan])
    ])
    def test_transform_from_mov_SampleData(self,key,clust,last_time,i,expected_result):
        """
        This function tests Pipelines.transform_from_mov(data,key,clust,last_time,i),
        where data is an array of dictionaries of marker data,
        key is the name of the missing marker to perform gap filling for,
        clust is a list of markers in the same cluster as key,
        last_time is the last frame the the missing marker was visible, and
        i is the frame number the marker is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        data[key][i] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_mov(data,key,clust,last_time,i)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 4.79064083e-06
E       Max relative difference: 5.8979568e-08
E        x: array([-1002.66353773,    81.22543576,  1521.82434182])
E        y: array([-1002.66354241,    81.22543097,  1521.82434027])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:445: AssertionError
_ TestPipelinesGapFilling.test_transform_from_mov_SampleData[LFHD-clust1-3-12-expected_result1] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x00000237665815B0>
key = 'LFHD', clust = ['RFHD', 'RBHD', 'LBHD'], last_time = 3, i = 12
expected_result = [-1002.57542092, 81.24378237, 1521.80517086]

    @pytest.mark.parametrize("key,clust,last_time,i,expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 11,
        [-1002.66354241,    81.22543097,  1521.82434027]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 12,
        [-1002.57542092,    81.24378237,  1521.80517086]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, -1,
        [714.4191660275219, -8.268045936969543, 1550.088229312965]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 15,
        [-1002.30681304,    81.29768863,  1521.76708531]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 100,
        [-991.7315609567293, 82.91868701883672, 1526.597213251877]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 15, 16,
        [np.nan, np.nan, np.nan])
    ])
    def test_transform_from_mov_SampleData(self,key,clust,last_time,i,expected_result):
        """
        This function tests Pipelines.transform_from_mov(data,key,clust,last_time,i),
        where data is an array of dictionaries of marker data,
        key is the name of the missing marker to perform gap filling for,
        clust is a list of markers in the same cluster as key,
        last_time is the last frame the the missing marker was visible, and
        i is the frame number the marker is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        data[key][i] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_mov(data,key,clust,last_time,i)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 5.86944277e-06
E       Max relative difference: 7.22448242e-08
E        x: array([-1002.57542578,    81.2437765 ,  1521.80516957])
E        y: array([-1002.57542092,    81.24378237,  1521.80517086])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:445: AssertionError
_ TestPipelinesGapFilling.test_transform_from_mov_SampleData[LFHD-clust2-3--1-expected_result2] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x0000023774225550>
key = 'LFHD', clust = ['RFHD', 'RBHD', 'LBHD'], last_time = 3, i = -1
expected_result = [714.4191660275219, -8.268045936969543, 1550.088229312965]

    @pytest.mark.parametrize("key,clust,last_time,i,expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 11,
        [-1002.66354241,    81.22543097,  1521.82434027]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 12,
        [-1002.57542092,    81.24378237,  1521.80517086]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, -1,
        [714.4191660275219, -8.268045936969543, 1550.088229312965]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 15,
        [-1002.30681304,    81.29768863,  1521.76708531]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 100,
        [-991.7315609567293, 82.91868701883672, 1526.597213251877]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 15, 16,
        [np.nan, np.nan, np.nan])
    ])
    def test_transform_from_mov_SampleData(self,key,clust,last_time,i,expected_result):
        """
        This function tests Pipelines.transform_from_mov(data,key,clust,last_time,i),
        where data is an array of dictionaries of marker data,
        key is the name of the missing marker to perform gap filling for,
        clust is a list of markers in the same cluster as key,
        last_time is the last frame the the missing marker was visible, and
        i is the frame number the marker is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        data[key][i] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_mov(data,key,clust,last_time,i)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 2.96520977e-06
E       Max relative difference: 3.58634893e-07
E        x: array([ 714.41916619,   -8.26804297, 1550.08822978])
E        y: array([ 714.41916603,   -8.26804594, 1550.08822931])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:445: AssertionError
_ TestPipelinesGapFilling.test_transform_from_mov_SampleData[LFHD-clust3-3-15-expected_result3] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x0000023773B431F0>
key = 'LFHD', clust = ['RFHD', 'RBHD', 'LBHD'], last_time = 3, i = 15
expected_result = [-1002.30681304, 81.29768863, 1521.76708531]

    @pytest.mark.parametrize("key,clust,last_time,i,expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 11,
        [-1002.66354241,    81.22543097,  1521.82434027]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 12,
        [-1002.57542092,    81.24378237,  1521.80517086]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, -1,
        [714.4191660275219, -8.268045936969543, 1550.088229312965]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 15,
        [-1002.30681304,    81.29768863,  1521.76708531]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 100,
        [-991.7315609567293, 82.91868701883672, 1526.597213251877]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 15, 16,
        [np.nan, np.nan, np.nan])
    ])
    def test_transform_from_mov_SampleData(self,key,clust,last_time,i,expected_result):
        """
        This function tests Pipelines.transform_from_mov(data,key,clust,last_time,i),
        where data is an array of dictionaries of marker data,
        key is the name of the missing marker to perform gap filling for,
        clust is a list of markers in the same cluster as key,
        last_time is the last frame the the missing marker was visible, and
        i is the frame number the marker is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        data[key][i] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_mov(data,key,clust,last_time,i)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 5.61337083e-06
E       Max relative difference: 3.8158658e-08
E        x: array([-1002.30680743,    81.29768553,  1521.76708717])
E        y: array([-1002.30681304,    81.29768863,  1521.76708531])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:445: AssertionError
_ TestPipelinesGapFilling.test_transform_from_mov_SampleData[LFHD-clust4-3-100-expected_result4] _

self = <test_Pipelines.TestPipelinesGapFilling object at 0x00000237664D5130>
key = 'LFHD', clust = ['RFHD', 'RBHD', 'LBHD'], last_time = 3, i = 100
expected_result = [-991.7315609567293, 82.91868701883672, 1526.597213251877]

    @pytest.mark.parametrize("key,clust,last_time,i,expected_result", [
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 11,
        [-1002.66354241,    81.22543097,  1521.82434027]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 12,
        [-1002.57542092,    81.24378237,  1521.80517086]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, -1,
        [714.4191660275219, -8.268045936969543, 1550.088229312965]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 15,
        [-1002.30681304,    81.29768863,  1521.76708531]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 3, 100,
        [-991.7315609567293, 82.91868701883672, 1526.597213251877]),
        ('LFHD', ['RFHD', 'RBHD', 'LBHD'], 15, 16,
        [np.nan, np.nan, np.nan])
    ])
    def test_transform_from_mov_SampleData(self,key,clust,last_time,i,expected_result):
        """
        This function tests Pipelines.transform_from_mov(data,key,clust,last_time,i),
        where data is an array of dictionaries of marker data,
        key is the name of the missing marker to perform gap filling for,
        clust is a list of markers in the same cluster as key,
        last_time is the last frame the the missing marker was visible, and
        i is the frame number the marker is missing for.
    
        We use files from SampleData/Sample_2/ for testing.
        We test for 6 missing frames from the loaded data.
        """
        data = self.data
        data[key][i] = np.array([np.nan, np.nan, np.nan])
        result = Pipelines.transform_from_mov(data,key,clust,last_time,i)
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 3.88099829e-06
E       Max relative difference: 1.77275689e-08
E        x: array([-991.73155708,   82.91868555, 1526.59721209])
E        y: array([-991.73156096,   82.91868702, 1526.59721325])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:445: AssertionError
__________________________ TestCSVOutput.test_ROM[0] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237663B7760>
angles_ROM = (array([-0.3086345 , -0.30599665, -0.30423808, ..., -1.19011606,
       -1.18674185, -1.18336681]), array([-0.30849491, -0.30611243, -0.30389522, ..., -1.18987354,
       -1.18692653, -1.18366165]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00271016
E       Max relative difference: 0.98464574
E        x: array([-0.3086345 , -0.30599665, -0.30423808, ..., -1.19011606,
E              -1.18674185, -1.18336681])
E        y: array([-0.30849491, -0.30611243, -0.30389522, ..., -1.18987354,
E              -1.18692653, -1.18366165])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
---------------------------- Captured stdout setup ----------------------------
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\59993_Frame\59993_Frame_Dynamic.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\59993_Frame\59993_Frame_Static.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\ROM\Sample_Dynamic.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\ROM\Sample_Static.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\Test_Files\Movement_trial.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData\Test_Files\Static_trial.c3d
__________________________ TestCSVOutput.test_ROM[1] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023711147910>
angles_ROM = (array([-6.12099481, -6.12099481, -6.12275336, ..., -6.63474648,
       -6.69460092, -6.75974498]), array([-6.12129279, -6.12165307, -6.12213066, ..., -6.63456801,
       -6.69508577, -6.75981528]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00174063
E       Max relative difference: 0.0315997
E        x: array([-6.12099481, -6.12099481, -6.12275336, ..., -6.63474648,
E              -6.69460092, -6.75974498])
E        y: array([-6.12129279, -6.12165307, -6.12213066, ..., -6.63456801,
E              -6.69508577, -6.75981528])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[2] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237111514C0>
angles_ROM = (array([ 7.57151779,  7.56257003,  7.55385362, ..., -1.43306407,
       -1.43852018, -1.44221741]), array([ 7.5714311 ,  7.5624917 ,  7.55373785, ..., -1.43279539,
       -1.43773098, -1.44301653]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00168941
E       Max relative difference: 0.02617967
E        x: array([ 7.57151779,  7.56257003,  7.55385362, ..., -1.43306407,
E              -1.43852018, -1.44221741])
E        y: array([ 7.5714311 ,  7.5624917 ,  7.55373785, ..., -1.43279539,
E              -1.43773098, -1.44301653])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[3] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370152C430>
angles_ROM = (array([2.91351586, 2.90937538, 2.9053538 , ..., 4.1592686 , 4.24507917,
       4.33042129]), array([2.91422293, 2.91095144, 2.90764723, ..., 4.16072121, 4.24376399,
       4.33017623]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00490255
E       Max relative difference: 0.44077883
E        x: array([2.91351586, 2.90937538, 2.9053538 , ..., 4.1592686 , 4.24507917,
E              4.33042129])
E        y: array([2.91422293, 2.91095144, 2.90764723, ..., 4.16072121, 4.24376399,
E              4.33017623])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[4] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237111513A0>
angles_ROM = (array([-6.86572711, -6.87105696, -6.86904109, ..., -4.37466453,
       -4.37276575, -4.37843063]), array([-6.86706898, -6.86847416, -6.86967343, ..., -4.37203958,
       -4.37510309, -4.37909197]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00452378
E       Max relative difference: 0.23333989
E        x: array([-6.86572711, -6.87105696, -6.86904109, ..., -4.37466453,
E              -4.37276575, -4.37843063])
E        y: array([-6.86706898, -6.86847416, -6.86967343, ..., -4.37203958,
E              -4.37510309, -4.37909197])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[5] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B0220>
angles_ROM = (array([-18.82124591, -18.83190069, -18.84066281, ..., -20.09879704,
       -20.08987362, -20.07643108]), array([-18.82100071, -18.83174544, -18.84097336, ..., -20.09804297,
       -20.08836706, -20.07767944]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00692736
E       Max relative difference: 0.90016373
E        x: array([-18.82124591, -18.83190069, -18.84066281, ..., -20.09879704,
E              -20.08987362, -20.07643108])
E        y: array([-18.82100071, -18.83174544, -18.84097336, ..., -20.09804297,
E              -20.08836706, -20.07767944])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[6] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147A0D0>
angles_ROM = (array([-2.86098767, -2.86475456, -2.86811372, ..., -1.27729749,
       -1.18296164, -1.08940928]), array([-2.86020455, -2.86305315, -2.86569378, ..., -1.27584105,
       -1.18421674, -1.08922521]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00437844
E       Max relative difference: 0.54302488
E        x: array([-2.86098767, -2.86475456, -2.86811372, ..., -1.27729749,
E              -1.18296164, -1.08940928])
E        y: array([-2.86020455, -2.86305315, -2.86569378, ..., -1.27584105,
E              -1.18421674, -1.08922521])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[7] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370152C310>
angles_ROM = (array([-5.34691622, -5.34244519, -5.34507529, ..., -1.88442876,
       -1.88346864, -1.87451174]), array([-5.34565092, -5.34501513, -5.34442775, ..., -1.88712018,
       -1.88127196, -1.87414372]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.0038571
E       Max relative difference: 0.06735393
E        x: array([-5.34691622, -5.34244519, -5.34507529, ..., -1.88442876,
E              -1.88346864, -1.87451174])
E        y: array([-5.34565092, -5.34501513, -5.34442775, ..., -1.88712018,
E              -1.88127196, -1.87414372])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[8] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A1790>
angles_ROM = (array([-1.80304291, -1.78739788, -1.7742434 , ...,  0.59252291,
        0.56638045,  0.54027503]), array([-1.80256197, -1.78751095, -1.77416997, ...,  0.5915892 ,
        0.56594896,  0.54133975]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00687166
E       Max relative difference: 4.69003945
E        x: array([-1.80304291, -1.78739788, -1.7742434 , ...,  0.59252291,
E               0.56638045,  0.54027503])
E        y: array([-1.80256197, -1.78751095, -1.77416997, ...,  0.5915892 ,
E               0.56594896,  0.54133975])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
__________________________ TestCSVOutput.test_ROM[9] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F6730>
angles_ROM = (array([3.19433977, 3.19851677, 3.20227207, ..., 4.81541841, 4.83065382,
       4.84581572]), array([3.19436875, 3.19852473, 3.20225689, ..., 4.81545581, 4.83072566,
       4.84578321]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00067648
E       Max relative difference: 5.08029382e-05
E        x: array([3.19433977, 3.19851677, 3.20227207, ..., 4.81541841, 4.83065382,
E              4.84581572])
E        y: array([3.19436875, 3.19852473, 3.20225689, ..., 4.81545581, 4.83072566,
E              4.84578321])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[10] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023711147700>
angles_ROM = (array([2.3832703 , 2.38067691, 2.377929  , ..., 1.62530083, 1.62406339,
       1.62347996]), array([2.38341009, 2.38056557, 2.37794589, ..., 1.62552229, 1.62422171,
       1.62348241]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.00234329
E       Max relative difference: 32.81449071
E        x: array([2.3832703 , 2.38067691, 2.377929  , ..., 1.62530083, 1.62406339,
E              1.62347996])
E        y: array([2.38341009, 2.38056557, 2.37794589, ..., 1.62552229, 1.62422171,
E              1.62348241])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[11] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147A340>
angles_ROM = (array([-19.47573071, -19.47276063, -19.47015732, ..., -16.74561654,
       -16.73364837, -16.72217968]), array([-19.4759155 , -19.47285284, -19.47005282, ..., -16.74582452,
       -16.7341015 , -16.72195542]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00199952
E       Max relative difference: 0.00011774
E        x: array([-19.47573071, -19.47276063, -19.47015732, ..., -16.74561654,
E              -16.73364837, -16.72217968])
E        y: array([-19.4759155 , -19.47285284, -19.47005282, ..., -16.74582452,
E              -16.7341015 , -16.72195542])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[12] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B0AF0>
angles_ROM = (array([-0.45853557, -0.45841633, -0.4583513 , ...,  2.91630614,
        2.94528801,  2.97396074]), array([-0.45848697, -0.45839267, -0.458369  , ...,  2.9162459 ,
        2.94528914,  2.97398604]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.00090574
E       Max relative difference: 0.0114739
E        x: array([-0.45853557, -0.45841633, -0.4583513 , ...,  2.91630614,
E               2.94528801,  2.97396074])
E        y: array([-0.45848697, -0.45839267, -0.458369  , ...,  2.9162459 ,
E               2.94528914,  2.97398604])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[13] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023711147C70>
angles_ROM = (array([-0.38666048, -0.38455871, -0.38249532, ..., -0.63513503,
       -0.63820304, -0.64195902]), array([-0.38667321, -0.38448231, -0.38263024, ..., -0.63518568,
       -0.63806865, -0.6416788 ]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.00174428
E       Max relative difference: 0.75783328
E        x: array([-0.38666048, -0.38455871, -0.38249532, ..., -0.63513503,
E              -0.63820304, -0.64195902])
E        y: array([-0.38667321, -0.38448231, -0.38263024, ..., -0.63518568,
E              -0.63806865, -0.6416788 ])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[14] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237015006D0>
angles_ROM = (array([-21.87569216, -21.88430291, -21.89219865, ..., -16.25493988,
       -16.2025944 , -16.15131666]), array([-21.87580804, -21.88436035, -21.89214957, ..., -16.25480642,
       -16.2025953 , -16.1513826 ]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00157652
E       Max relative difference: 0.0015427
E        x: array([-21.87569216, -21.88430291, -21.89219865, ..., -16.25493988,
E              -16.2025944 , -16.15131666])
E        y: array([-21.87580804, -21.88436035, -21.89214957, ..., -16.25480642,
E              -16.2025953 , -16.1513826 ])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[15] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F7A00>
angles_ROM = (array([2.50538589, 2.51463208, 2.52323476, ..., 4.35507161, 4.34020264,
       4.3249256 ]), array([2.50533841, 2.51460223, 2.52324259, ..., 4.35501649, 4.34009454,
       4.32496208]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3874 / 3876 (99.9%)
E       Max absolute difference: 0.00287068
E       Max relative difference: 0.00466739
E        x: array([2.50538589, 2.51463208, 2.52323476, ..., 4.35507161, 4.34020264,
E              4.3249256 ])
E        y: array([2.50533841, 2.51460223, 2.52324259, ..., 4.35501649, 4.34009454,
E              4.32496208])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[16] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B02E0>
angles_ROM = (array([-7.68828102, -7.68699169, -7.68550955, ..., -8.85854108,
       -8.84588634, -8.83229326]), array([-7.68822011, -7.68695826, -7.68553638, ..., -8.85846615,
       -8.84572907, -8.83236042]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00199138
E       Max relative difference: 0.00045793
E        x: array([-7.68828102, -7.68699169, -7.68550955, ..., -8.85854108,
E              -8.84588634, -8.83229326])
E        y: array([-7.68822011, -7.68695826, -7.68553638, ..., -8.85846615,
E              -8.84572907, -8.83236042])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[17] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147ADC0>
angles_ROM = (array([26.49826971, 26.49457704, 26.49033181, ..., 29.74664004,
       29.71262158, 29.67605365]), array([26.49810232, 26.4944883 , 26.49041572, ..., 29.74644745,
       29.71220742, 29.67624315]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00200122
E       Max relative difference: 0.00037706
E        x: array([26.49826971, 26.49457704, 26.49033181, ..., 29.74664004,
E              29.71262158, 29.67605365])
E        y: array([26.49810232, 26.4944883 , 26.49041572, ..., 29.74644745,
E              29.71220742, 29.67624315])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[18] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147FDF0>
angles_ROM = (array([4.38467677, 4.38770394, 4.39045505, ..., 8.32235687, 8.31798362,
       8.31397278]), array([4.38467015, 4.38770561, 4.39047126, ..., 8.32239353, 8.31799385,
       8.31397059]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.00051734
E       Max relative difference: 0.01301052
E        x: array([4.38467677, 4.38770394, 4.39045505, ..., 8.32235687, 8.31798362,
E              8.31397278])
E        y: array([4.38467015, 4.38770561, 4.39047126, ..., 8.32239353, 8.31799385,
E              8.31397059])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[19] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B04F0>
angles_ROM = (array([ 0.59926934,  0.59808446,  0.59687845, ..., -0.80077233,
       -0.7950548 , -0.78926255]), array([ 0.59929699,  0.59809817,  0.59686916, ..., -0.80080925,
       -0.79505499, -0.78924574]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.00059856
E       Max relative difference: 0.13343979
E        x: array([ 0.59926934,  0.59808446,  0.59687845, ..., -0.80077233,
E              -0.7950548 , -0.78926255])
E        y: array([ 0.59929699,  0.59809817,  0.59686916, ..., -0.80080925,
E              -0.79505499, -0.78924574])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[20] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701496610>
angles_ROM = (array([-2.37863605, -2.37287519, -2.36701151, ...,  4.42989891,
        4.40222001,  4.37417721]), array([-2.37873801, -2.37290931, -2.36693385, ...,  4.43010404,
        4.40224735,  4.37412228]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00246415
E       Max relative difference: 0.22244173
E        x: array([-2.37863605, -2.37287519, -2.36701151, ...,  4.42989891,
E               4.40222001,  4.37417721])
E        y: array([-2.37873801, -2.37290931, -2.36693385, ...,  4.43010404,
E               4.40224735,  4.37412228])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[21] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A4B80>
angles_ROM = (array([-83.89046395, -83.89424475, -83.89675498, ..., -67.92904462,
       -67.9252992 , -67.91682376]), array([-83.89045651, -83.89422777, -83.89671631, ..., -67.92908856,
       -67.92546167, -67.91666331]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.02764154
E       Max relative difference: 0.00390913
E        x: array([-83.89046395, -83.89424475, -83.89675498, ..., -67.92904462,
E              -67.9252992 , -67.91682376])
E        y: array([-83.89045651, -83.89422777, -83.89671631, ..., -67.92908856,
E              -67.92546167, -67.91666331])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[22] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701487400>
angles_ROM = (array([ -4.88436665,  -4.88765088,  -4.89190121, ..., -18.25812518,
       -18.25974115, -18.26682388]), array([ -4.88440561,  -4.88768338,  -4.89191891, ..., -18.2581228 ,
       -18.25966693, -18.26694537]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3875 / 3876 (100%)
E       Max absolute difference: 0.02654896
E       Max relative difference: 0.01063404
E        x: array([ -4.88436665,  -4.88765088,  -4.89190121, ..., -18.25812518,
E              -18.25974115, -18.26682388])
E        y: array([ -4.88440561,  -4.88768338,  -4.89191891, ..., -18.2581228 ,
E              -18.25966693, -18.26694537])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[23] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370150F7F0>
angles_ROM = (array([70.44473428, 70.44306351, 70.44192346, ..., 83.72699517,
       83.71620498, 83.70515541]), array([70.44471355, 70.44304783, 70.44191845, ..., 83.72697169,
       83.71616725, 83.70515655]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00112044
E       Max relative difference: 3.17158567e-05
E        x: array([70.44473428, 70.44306351, 70.44192346, ..., 83.72699517,
E              83.71620498, 83.70515541])
E        y: array([70.44471355, 70.44304783, 70.44191845, ..., 83.72697169,
E              83.71616725, 83.70515655])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[24] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A13D0>
angles_ROM = (array([86.00905308, 86.00253564, 85.99639196, ..., 80.31584766,
       80.31288588, 80.30992877]), array([86.00906645, 86.00254798, 85.99640368, ..., 80.31585992,
       80.31290065, 80.30994337]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00252438
E       Max relative difference: 0.00014182
E        x: array([86.00905308, 86.00253564, 85.99639196, ..., 80.31584766,
E              80.31288588, 80.30992877])
E        y: array([86.00906645, 86.00254798, 85.99640368, ..., 80.31585992,
E              80.31290065, 80.30994337])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[25] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014FCF10>
angles_ROM = (array([167.9629403 , 167.9568981 , 167.95104515, ..., 167.1229682 ,
       167.11787136, 167.11267543]), array([167.96294841, 167.95690767, 167.95105639, ..., 167.12297955,
       167.1178852 , 167.11269062]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00277436
E       Max relative difference: 6.86585895e-05
E        x: array([167.9629403 , 167.9568981 , 167.95104515, ..., 167.1229682 ,
E              167.11787136, 167.11267543])
E        y: array([167.96294841, 167.95690767, 167.95105639, ..., 167.12297955,
E              167.1178852 , 167.11269062])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[26] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A9310>
angles_ROM = (array([-72.18897777, -72.19215365, -72.19475165, ..., -77.65742431,
       -77.64917357, -77.64036567]), array([-72.18901201, -72.19218642, -72.19478242, ..., -77.65745896,
       -77.64920513, -77.64039544]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00027515
E       Max relative difference: 1.95804393e-05
E        x: array([-72.18897777, -72.19215365, -72.19475165, ..., -77.65742431,
E              -77.64917357, -77.64036567])
E        y: array([-72.18901201, -72.19218642, -72.19478242, ..., -77.65745896,
E              -77.64920513, -77.64039544])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[27] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147F490>
angles_ROM = (array([0.02119691, 0.02797144, 0.03373963, ..., 2.25171584, 2.23528991,
       2.213934  ]), array([0.02119673, 0.02794399, 0.03371347, ..., 2.2517172 , 2.23523949,
       2.21395827]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3866 / 3876 (99.7%)
E       Max absolute difference: 7.87162777e-05
E       Max relative difference: 0.56940394
E        x: array([0.02119691, 0.02797144, 0.03373963, ..., 2.25171584, 2.23528991,
E              2.213934  ])
E        y: array([0.02119673, 0.02794399, 0.03371347, ..., 2.2517172 , 2.23523949,
E              2.21395827])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[28] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701500760>
angles_ROM = (array([5.46225241, 5.47415002, 5.48489093, ..., 8.24837323, 8.32988342,
       8.40094118]), array([5.46225284, 5.47412876, 5.48486967, ..., 8.24837387, 8.3298377 ,
       8.40096499]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3866 / 3876 (99.7%)
E       Max absolute difference: 6.61390815e-05
E       Max relative difference: 0.00179811
E        x: array([5.46225241, 5.47415002, 5.48489093, ..., 8.24837323, 8.32988342,
E              8.40094118])
E        y: array([5.46225284, 5.47412876, 5.48486967, ..., 8.24837387, 8.3298377 ,
E              8.40096499])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[29] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A1400>
angles_ROM = (array([-91.49608249, -91.48628249, -91.47765398, ..., -93.53541672,
       -93.59946097, -93.67216134]), array([-91.49608534, -91.48628065, -91.47764675, ..., -93.5354113 ,
       -93.59945099, -93.67216063]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3833 / 3876 (98.9%)
E       Max absolute difference: 6.03899312e-05
E       Max relative difference: 6.64486444e-07
E        x: array([-91.49608249, -91.48628249, -91.47765398, ..., -93.53541672,
E              -93.59946097, -93.67216134])
E        y: array([-91.49608534, -91.48628065, -91.47764675, ..., -93.5354113 ,
E              -93.59945099, -93.67216063])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[30] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701496F40>
angles_ROM = (array([-3.7561464 , -3.75682328, -3.75779539, ..., -1.55252074,
       -1.50101973, -1.44996445]), array([-3.75614738, -3.75682328, -3.75779854, ..., -1.55251984,
       -1.50101557, -1.44996862]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3411 / 3876 (88%)
E       Max absolute difference: 0.00057193
E       Max relative difference: 0.00017352
E        x: array([-3.7561464 , -3.75682328, -3.75779539, ..., -1.55252074,
E              -1.50101973, -1.44996445])
E        y: array([-3.75614738, -3.75682328, -3.75779854, ..., -1.55251984,
E              -1.50101557, -1.44996862])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[31] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701500D00>
angles_ROM = (array([ 0.73023337,  0.72613733,  0.72204155, ..., -2.49652934,
       -2.6228984 , -2.74895524]), array([ 0.73023109,  0.72613319,  0.72204383, ..., -2.49652789,
       -2.62290256, -2.74896148]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3657 / 3876 (94.3%)
E       Max absolute difference: 3.50518741e-05
E       Max relative difference: 0.00492553
E        x: array([ 0.73023337,  0.72613733,  0.72204155, ..., -2.49652934,
E              -2.6228984 , -2.74895524])
E        y: array([ 0.73023109,  0.72613319,  0.72204383, ..., -2.49652789,
E              -2.62290256, -2.74896148])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[32] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370149A2B0>
angles_ROM = (array([264.86736553, 264.87027401, 264.87325285, ..., -86.98972904,
       -87.00561838, -87.02254878]), array([264.86736196, 264.87027408, 264.87325618, ..., -86.98972031,
       -87.00561235, -87.02254492]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3816 / 3876 (98.5%)
E       Max absolute difference: 0.00057188
E       Max relative difference: 3.6590336e-06
E        x: array([264.86736553, 264.87027401, 264.87325285, ..., -86.98972904,
E              -87.00561838, -87.02254878])
E        y: array([264.86736196, 264.87027408, 264.87325618, ..., -86.98972031,
E              -87.00561235, -87.02254492])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[33] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F5610>
angles_ROM = (array([6.09378172, 6.10205693, 6.10911553, ..., 5.50183938, 5.45663537,
       5.40117097]), array([6.09377965, 6.10203235, 6.10909762, ..., 5.50184183, 5.45658987,
       5.40118665]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3874 / 3876 (99.9%)
E       Max absolute difference: 6.45582654e-05
E       Max relative difference: 0.01676841
E        x: array([6.09378172, 6.10205693, 6.10911553, ..., 5.50183938, 5.45663537,
E              5.40117097])
E        y: array([6.09377965, 6.10203235, 6.10909762, ..., 5.50184183, 5.45658987,
E              5.40118665])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[34] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370150FCA0>
angles_ROM = (array([-3.93716546, -3.94377797, -3.94977197, ..., -4.1472057 ,
       -4.08243877, -4.01327458]), array([-3.93716652, -3.94374968, -3.94974771, ..., -4.14720578,
       -4.08238028, -4.01330395]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3871 / 3876 (99.9%)
E       Max absolute difference: 6.53397947e-05
E       Max relative difference: 0.00210875
E        x: array([-3.93716546, -3.94377797, -3.94977197, ..., -4.1472057 ,
E              -4.08243877, -4.01327458])
E        y: array([-3.93716652, -3.94374968, -3.94974771, ..., -4.14720578,
E              -4.08238028, -4.01330395])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[35] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701487220>
angles_ROM = (array([-3.68997928, -3.69667117, -3.702113  , ...,  6.70309786,
        6.75636026,  6.81672616]), array([-3.68997986, -3.6966723 , -3.70211672, ...,  6.7031011 ,
        6.75635414,  6.8167311 ]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3869 / 3876 (99.8%)
E       Max absolute difference: 5.3879002e-05
E       Max relative difference: 0.00037803
E        x: array([-3.68997928, -3.69667117, -3.702113  , ...,  6.70309786,
E               6.75636026,  6.81672616])
E        y: array([-3.68997986, -3.6966723 , -3.70211672, ...,  6.7031011 ,
E               6.75635414,  6.8167311 ])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[36] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701486880>
angles_ROM = (array([-6.47939029, -6.47570119, -6.47368214, ..., -4.28293984,
       -4.21274873, -4.14813502]), array([-6.47970578, -6.47635471, -6.47309712, ..., -4.28263997,
       -4.21311913, -4.14811511]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00260494
E       Max relative difference: 0.26102379
E        x: array([-6.47939029, -6.47570119, -6.47368214, ..., -4.28293984,
E              -4.21274873, -4.14813502])
E        y: array([-6.47970578, -6.47635471, -6.47309712, ..., -4.28263997,
E              -4.21311913, -4.14811511])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[37] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A9D00>
angles_ROM = (array([4.6382995 , 4.63566312, 4.63434023, ..., 2.50285467, 2.45275655,
       2.40286102]), array([4.63827663, 4.63592208, 4.63403077, ..., 2.50275678, 2.4530448 ,
       2.40326114]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00175715
E       Max relative difference: 0.02779729
E        x: array([4.6382995 , 4.63566312, 4.63434023, ..., 2.50285467, 2.45275655,
E              2.40286102])
E        y: array([4.63827663, 4.63592208, 4.63403077, ..., 2.50275678, 2.4530448 ,
E              2.40326114])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[38] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701515D90>
angles_ROM = (array([-2.89274779, -2.88677778, -2.88106885, ..., -1.88872183,
       -1.8651998 , -1.84057829]), array([-2.89306898, -2.88684948, -2.88094138, ..., -1.88955559,
       -1.86540712, -1.83994448]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3876 / 3876 (100%)
E       Max absolute difference: 0.00152458
E       Max relative difference: 1.00210408
E        x: array([-2.89274779, -2.88677778, -2.88106885, ..., -1.88872183,
E              -1.8651998 , -1.84057829])
E        y: array([-2.89306898, -2.88684948, -2.88094138, ..., -1.88955559,
E              -1.86540712, -1.83994448])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[39] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701489D90>
angles_ROM = (array([  9.42568686,   9.42648354,   9.42722555, ..., -20.99316993,
       -21.00770859, -21.02491705]), array([  9.4256915 ,   9.42648709,   9.4272184 , ..., -20.99317568,
       -21.00770653, -21.02491218]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3868 / 3876 (99.8%)
E       Max absolute difference: 3.99818847e-05
E       Max relative difference: 0.0014707
E        x: array([  9.42568686,   9.42648354,   9.42722555, ..., -20.99316993,
E              -21.00770859, -21.02491705])
E        y: array([  9.4256915 ,   9.42648709,   9.4272184 , ..., -20.99317568,
E              -21.00770653, -21.02491218])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[40] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F6CD0>
angles_ROM = (array([49.13352846, 49.13318608, 49.13341811, ..., 17.00207578,
       16.99052626, 16.98108539]), array([49.13352941, 49.13318626, 49.1334233 , ..., 17.0020728 ,
       16.9905207 , 16.98108846]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3852 / 3876 (99.4%)
E       Max absolute difference: 2.2622585e-05
E       Max relative difference: 2.82763897e-06
E        x: array([49.13352846, 49.13318608, 49.13341811, ..., 17.00207578,
E              16.99052626, 16.98108539])
E        y: array([49.13352941, 49.13318626, 49.1334233 , ..., 17.0020728 ,
E              16.9905207 , 16.98108846])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[41] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A9850>
angles_ROM = (array([ 9.61122355,  9.60182006,  9.59236076, ..., 24.06382517,
       24.13675895, 24.21631987]), array([ 9.61122488,  9.60181611,  9.59238654, ..., 24.06383093,
       24.13676206, 24.21631682]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3872 / 3876 (99.9%)
E       Max absolute difference: 7.6922269e-05
E       Max relative difference: 0.00024616
E        x: array([ 9.61122355,  9.60182006,  9.59236076, ..., 24.06382517,
E              24.13675895, 24.21631987])
E        y: array([ 9.61122488,  9.60181611,  9.59238654, ..., 24.06383093,
E              24.13676206, 24.21631682])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[42] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370150FB50>
angles_ROM = (array([  4.60217917,   4.60064478,   4.59890009, ..., -23.67031597,
       -23.64420751, -23.6192926 ]), array([  4.60218187,   4.60065089,   4.59889763, ..., -23.67031621,
       -23.64420192, -23.61928526]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3862 / 3876 (99.6%)
E       Max absolute difference: 3.79282482e-05
E       Max relative difference: 0.00048242
E        x: array([  4.60217917,   4.60064478,   4.59890009, ..., -23.67031597,
E              -23.64420751, -23.6192926 ])
E        y: array([  4.60218187,   4.60065089,   4.59889763, ..., -23.67031621,
E              -23.64420192, -23.61928526])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[43] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701487070>
angles_ROM = (array([39.90544153, 39.9062524 , 39.90677488, ...,  7.28796489,
        7.2672299 ,  7.24204716]), array([39.90544007, 39.90625244, 39.90677225, ...,  7.28796976,
        7.2672368 ,  7.24204484]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3852 / 3876 (99.4%)
E       Max absolute difference: 1.94401528e-05
E       Max relative difference: 2.48736075e-06
E        x: array([39.90544153, 39.9062524 , 39.90677488, ...,  7.28796489,
E               7.2672299 ,  7.24204716])
E        y: array([39.90544007, 39.90625244, 39.90677225, ...,  7.28796976,
E               7.2672368 ,  7.24204484])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[44] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370149A070>
angles_ROM = (array([0.74874413, 0.73700184, 0.72597227, ..., 6.4197036 , 6.42032341,
       6.42064775]), array([0.74871346, 0.73698303, 0.72599822, ..., 6.41971326, 6.42033035,
       6.42065254]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3865 / 3876 (99.7%)
E       Max absolute difference: 0.0001113
E       Max relative difference: 0.02177095
E        x: array([0.74874413, 0.73700184, 0.72597227, ..., 6.4197036 , 6.42032341,
E              6.42064775])
E        y: array([0.74871346, 0.73698303, 0.72599822, ..., 6.41971326, 6.42033035,
E              6.42065254])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[45] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F6F10>
angles_ROM = (array([26.11592043, 26.11710317, 26.11758945, ..., 37.07019317,
       37.09313109, 37.1166782 ]), array([26.11592024, 26.11710465, 26.11759214, ..., 37.07019579,
       37.09313676, 37.11667699]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3852 / 3876 (99.4%)
E       Max absolute difference: 1.46477468e-05
E       Max relative difference: 7.62716088e-07
E        x: array([26.11592043, 26.11710317, 26.11758945, ..., 37.07019317,
E              37.09313109, 37.1166782 ])
E        y: array([26.11592024, 26.11710465, 26.11759214, ..., 37.07019579,
E              37.09313676, 37.11667699])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[48] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370150F0D0>
angles_ROM = (array([29.19420275, 29.1990458 , 29.20343887, ..., 38.4642457 ,
       38.46547414, 38.46536969]), array([29.19419804, 29.19904744, 29.20343938, ..., 38.46424568,
       38.46547246, 38.46537064]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3841 / 3876 (99.1%)
E       Max absolute difference: 1.4994432e-05
E       Max relative difference: 7.99073228e-07
E        x: array([29.19420275, 29.1990458 , 29.20343887, ..., 38.4642457 ,
E              38.46547414, 38.46536969])
E        y: array([29.19419804, 29.19904744, 29.20343938, ..., 38.46424568,
E              38.46547246, 38.46537064])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[51] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F5340>
angles_ROM = (array([ 9.83027157,  9.83070739,  9.83161214, ..., -3.46391744,
       -3.52030864, -3.57908122]), array([ 9.83027117,  9.83069811,  9.83162067, ..., -3.46391959,
       -3.52032662, -3.57907424]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3824 / 3876 (98.7%)
E       Max absolute difference: 6.25843015e-05
E       Max relative difference: 0.00405057
E        x: array([ 9.83027157,  9.83070739,  9.83161214, ..., -3.46391744,
E              -3.52030864, -3.57908122])
E        y: array([ 9.83027117,  9.83069811,  9.83162067, ..., -3.46391959,
E              -3.52032662, -3.57907424])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[52] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E13A0>
angles_ROM = (array([16.79309237, 16.7931205 , 16.79328811, ..., 16.61983332,
       16.55030611, 16.46833695]), array([16.79309258, 16.79312103, 16.79333241, ..., 16.61986519,
       16.55031964, 16.46833476]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3656 / 3876 (94.3%)
E       Max absolute difference: 6.53510155e-05
E       Max relative difference: 0.00016071
E        x: array([16.79309237, 16.7931205 , 16.79328811, ..., 16.61983332,
E              16.55030611, 16.46833695])
E        y: array([16.79309258, 16.79312103, 16.79333241, ..., 16.61986519,
E              16.55031964, 16.46833476])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[53] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370150F640>
angles_ROM = (array([122.0970814 , 122.09742712, 122.09808895, ..., 102.05426635,
       101.9679339 , 101.88270439]), array([122.09708051, 122.09743211, 122.0979909 , ..., 102.05419517,
       101.96790614, 101.88270747]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3835 / 3876 (98.9%)
E       Max absolute difference: 0.00016131
E       Max relative difference: 1.60337482e-06
E        x: array([122.0970814 , 122.09742712, 122.09808895, ..., 102.05426635,
E              101.9679339 , 101.88270439])
E        y: array([122.09708051, 122.09743211, 122.0979909 , ..., 102.05419517,
E              101.96790614, 101.88270747])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[54] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701486430>
angles_ROM = (array([12.8941564 , 12.89833232, 12.90218279, ..., -7.53865614,
       -7.52794533, -7.5140695 ]), array([12.89415664, 12.89830406, 12.90220105, ..., -7.53865618,
       -7.52793881, -7.51407747]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3831 / 3876 (98.8%)
E       Max absolute difference: 8.59894482e-05
E       Max relative difference: 0.00657818
E        x: array([12.8941564 , 12.89833232, 12.90218279, ..., -7.53865614,
E              -7.52794533, -7.5140695 ])
E        y: array([12.89415664, 12.89830406, 12.90220105, ..., -7.53865618,
E              -7.52793881, -7.51407747])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[55] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014F6820>
angles_ROM = (array([17.39773141, 17.39481046, 17.39188836, ..., 21.85008776,
       21.83184134, 21.81230295]), array([17.39767463, 17.39477415, 17.39193431, ..., 21.85008775,
       21.83184103, 21.81230285]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3750 / 3876 (96.7%)
E       Max absolute difference: 7.21428597e-05
E       Max relative difference: 5.6277852e-05
E        x: array([17.39773141, 17.39481046, 17.39188836, ..., 21.85008776,
E              21.83184134, 21.81230295])
E        y: array([17.39767463, 17.39477415, 17.39193431, ..., 21.85008775,
E              21.83184103, 21.81230285])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
_________________________ TestCSVOutput.test_ROM[56] __________________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237015001C0>
angles_ROM = (array([128.74120368, 128.75150925, 128.76099173, ...,  94.79074801,
        94.79514435,  94.80202607]), array([128.74130258, 128.75159611, 128.76089609, ...,  94.79074795,
        94.79514465,  94.80202356]))

    @pytest.mark.parametrize("angles_ROM", get_columns_to_compare("ROM"), indirect=True)
    def test_ROM(self, angles_ROM):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_ROM
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3847 / 3876 (99.3%)
E       Max absolute difference: 0.00019593
E       Max relative difference: 2.28614736e-06
E        x: array([128.74120368, 128.75150925, 128.76099173, ...,  94.79074801,
E               94.79514435,  94.80202607])
E        y: array([128.74130258, 128.75159611, 128.76089609, ...,  94.79074795,
E               94.79514465,  94.80202356])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:341: AssertionError
______________________ TestCSVOutput.test_59993_Frame[3] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B66A0>
angles_59993_Frame = (array([-2.22104095, -2.23223591, -2.24905105, -2.25676881, -2.26162604,
       -2.26153041, -2.26603564, -2.27326082,...58378, -2.25031685, -2.24180631, -2.2422728 ,
       -2.22405422, -2.21689084, -2.21865418, -2.20861977, -2.20180022]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00179374
E       Max relative difference: 0.00086268
E        x: array([-2.22104095, -2.23223591, -2.24905105, -2.25676881, -2.26162604,
E              -2.26153041, -2.26603564, -2.27326082, -2.27128534, -2.27864589,
E              -2.28656526, -2.27886137, -2.28417749, -2.28927603, -2.292309  ,...
E        y: array([-2.22041583, -2.2336732 , -2.24755598, -2.2567314 , -2.26020475,
E              -2.26266299, -2.26737183, -2.27477934, -2.27236667, -2.27838015,
E              -2.28636602, -2.27829755, -2.28329532, -2.28869284, -2.2930875 ,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[4] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B6AC0>
angles_59993_Frame = (array([-13.88397239, -13.87724396, -13.88213227, -13.8792971 ,
       -13.87787179, -13.87566742, -13.88033224, -13.8...13.67938132, -13.68539006, -13.68482744, -13.67882522,
       -13.68035265, -13.67546674, -13.66250046, -13.6606658 ]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00172923
E       Max relative difference: 0.00012543
E        x: array([-13.88397239, -13.87724396, -13.88213227, -13.8792971 ,
E              -13.87787179, -13.87566742, -13.88033224, -13.86904627,
E              -13.87697093, -13.87599798, -13.87717867, -13.87175295,...
E        y: array([-13.88229232, -13.87887783, -13.88256057, -13.87918522,
E              -13.87682389, -13.87708305, -13.87948254, -13.86891656,
E              -13.87700031, -13.87609032, -13.87804923, -13.87009175,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[5] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701575100>
angles_59993_Frame = (array([67.102645  , 67.09836327, 67.10010906, 67.0953058 , 67.09385216,
       67.09207049, 67.0785496 , 67.06835931,...42778, 66.90315893, 66.92753363, 66.93947808,
       66.94342796, 66.9580888 , 66.96170834, 66.95216737, 66.9342395 ]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00144474
E       Max relative difference: 2.15661633e-05
E        x: array([67.102645  , 67.09836327, 67.10010906, 67.0953058 , 67.09385216,
E              67.09207049, 67.0785496 , 67.06835931, 67.07226335, 67.07697203,
E              67.06917714, 67.08693709, 67.08648416, 67.09454125, 67.09604155,...
E        y: array([67.10308214, 67.09707924, 67.10001588, 67.09532497, 67.09459894,
E              67.09179341, 67.07827349, 67.06830631, 67.07201697, 67.07711975,
E              67.06851585, 67.08779294, 67.08658223, 67.09512617, 67.09594941,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[6] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370157DA30>
angles_59993_Frame = (array([0.34990059, 0.33920119, 0.31830165, 0.31331888, 0.30652275,
       0.30581371, 0.29362536, 0.29249691, 0.29026...9, 0.63975208, 0.64243379, 0.63726027, 0.6344605 ,
       0.6425914 , 0.63401222, 0.62104722, 0.63268242, 0.62531214]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00178149
E       Max relative difference: 0.00755033
E        x: array([0.34990059, 0.33920119, 0.31830165, 0.31331888, 0.30652275,
E              0.30581371, 0.29362536, 0.29249691, 0.29026796, 0.27965094,
E              0.27508247, 0.28662699, 0.27512156, 0.27464339, 0.26730362,...
E        y: array([0.35030216, 0.33779207, 0.32002251, 0.31349869, 0.30785695,
E              0.30481744, 0.29222403, 0.2909671 , 0.28915318, 0.27999715,
E              0.27543136, 0.28698749, 0.27614268, 0.27509477, 0.26644689,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[7] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370157DA90>
angles_59993_Frame = (array([-8.10256288, -8.10575005, -8.1009889 , -8.10205028, -8.10273622,
       -8.10599812, -8.09437689, -8.09886963,...06841, -8.14440739, -8.16098599, -8.16857545,
       -8.17883942, -8.18190032, -8.18805337, -8.19981352, -8.1935698 ]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00170767
E       Max relative difference: 0.00021035
E        x: array([-8.10256288, -8.10575005, -8.1009889 , -8.10205028, -8.10273622,
E              -8.10599812, -8.09437689, -8.09886963, -8.09273689, -8.09428124,
E              -8.08864909, -8.09492893, -8.09169433, -8.08297207, -8.07826402,...
E        y: array([-8.1042676 , -8.10417354, -8.10052598, -8.10208458, -8.10385092,
E              -8.1045864 , -8.0952586 , -8.09899085, -8.09272781, -8.09415059,
E              -8.08774592, -8.09656429, -8.09126571, -8.08425405, -8.07794919,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[8] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E7BB0>
angles_59993_Frame = (array([61.80236078, 61.81581252, 61.807504  , 61.8030177 , 61.8050379 ,
       61.80427842, 61.79704707, 61.79197224,...16573, 61.82040417, 61.86013275, 61.88207769,
       61.91391105, 61.91840934, 61.92744395, 61.94227462, 61.92868109]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00101804
E       Max relative difference: 1.64515328e-05
E        x: array([61.80236078, 61.81581252, 61.807504  , 61.8030177 , 61.8050379 ,
E              61.80427842, 61.79704707, 61.79197224, 61.7855716 , 61.78040798,
E              61.77289742, 61.7723469 , 61.79184706, 61.78197662, 61.77832935,...
E        y: array([61.80170698, 61.81609939, 61.80810774, 61.80328159, 61.80451035,
E              61.8048167 , 61.79663513, 61.7918981 , 61.78572608, 61.78081426,
E              61.7734082 , 61.77172728, 61.7924926 , 61.78148369, 61.77837296,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_59993_Frame[9] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E64C0>
angles_59993_Frame = (array([-22.77620012, -22.77461968, -22.77291255, -22.77427409,
       -22.77419457, -22.77604632, -22.77473425, -22.7...22.64695485, -22.65428385, -22.66246701, -22.65666409,
       -22.66118948, -22.6576661 , -22.65165148, -22.65417396]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00017511
E       Max relative difference: 7.68856922e-06
E        x: array([-22.77620012, -22.77461968, -22.77291255, -22.77427409,
E              -22.77419457, -22.77604632, -22.77473425, -22.76973209,
E              -22.77752304, -22.78647534, -22.78636445, -22.78197317,...
E        y: array([-22.77619581, -22.77479479, -22.77284964, -22.77424367,
E              -22.77412525, -22.77603831, -22.7748128 , -22.76975468,
E              -22.77755012, -22.78641297, -22.78640529, -22.78191114,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[10] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E7070>
angles_59993_Frame = (array([-7.01669338, -7.02528027, -7.0229627 , -7.02664695, -7.02845463,
       -7.0284123 , -7.02847148, -7.03763523,...00695, -6.74985123, -6.75159911, -6.7588187 ,
       -6.74975284, -6.7480879 , -6.7372241 , -6.73709815, -6.72957087]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00010918
E       Max relative difference: 1.53711266e-05
E        x: array([-7.01669338, -7.02528027, -7.0229627 , -7.02664695, -7.02845463,
E              -7.0284123 , -7.02847148, -7.03763523, -7.04152749, -7.04494385,
E              -7.05401458, -7.05976205, -7.06190765, -7.07392453, -7.0749211 ,...
E        y: array([-7.01669368, -7.02518325, -7.0230291 , -7.02666894, -7.0284982 ,
E              -7.02844628, -7.02843784, -7.03759551, -7.04149168, -7.04498925,
E              -7.05400591, -7.05979147, -7.06194445, -7.07394347, -7.07490322,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[11] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701588310>
angles_59993_Frame = (array([-36.9936331 , -37.00599897, -36.97821497, -36.99133954,
       -36.98362644, -36.96419215, -36.99645221, -36.9...37.23217011, -37.23446974, -37.23259829, -37.22884789,
       -37.26156946, -37.23299322, -37.19526382, -37.17932391]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.0002293
E       Max relative difference: 6.16999995e-06
E        x: array([-36.9936331 , -37.00599897, -36.97821497, -36.99133954,
E              -36.98362644, -36.96419215, -36.99645221, -36.980223  ,
E              -36.99321111, -37.00266535, -36.98623806, -36.97808167,...
E        y: array([-36.99361963, -37.00577178, -36.9783042 , -36.99138964,
E              -36.98372249, -36.96420927, -36.99634637, -36.98019942,
E              -36.99315133, -37.00274914, -36.98617095, -36.97814738,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[12] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701499790>
angles_59993_Frame = (array([-16.07293597, -16.07451028, -16.07679938, -16.08184227,
       -16.08606226, -16.08158352, -16.09016956, -16.0...15.83502405, -15.85713743, -15.87286755, -15.86382977,
       -15.87637984, -15.87175051, -15.86991727, -15.86151685]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 7.66753511e-05
E       Max relative difference: 4.76517343e-06
E        x: array([-16.07293597, -16.07451028, -16.07679938, -16.08184227,
E              -16.08606226, -16.08158352, -16.09016956, -16.08877055,
E              -16.10159087, -16.10053492, -16.1091152 , -16.11223271,...
E        y: array([-16.07297292, -16.07452265, -16.0767706 , -16.08182521,
E              -16.08608244, -16.08154569, -16.09021547, -16.08877409,
E              -16.10158332, -16.10050249, -16.10910376, -16.11224779,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[13] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014998B0>
angles_59993_Frame = (array([-3.06759805, -3.07647139, -3.0817984 , -3.09020055, -3.09735999,
       -3.09669369, -3.11574999, -3.11738953,...01965, -2.93220993, -2.93422583, -2.95448415,
       -2.95029614, -2.9634332 , -2.96134557, -2.95954918, -2.96825146]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00011381
E       Max relative difference: 3.6822205e-05
E        x: array([-3.06759805, -3.07647139, -3.0817984 , -3.09020055, -3.09735999,
E              -3.09669369, -3.11574999, -3.11738953, -3.13427146, -3.14425464,
E              -3.15728639, -3.15942344, -3.18383115, -3.18918925, -3.19038104,...
E        y: array([-3.06760354, -3.07653979, -3.08170496, -3.0901765 , -3.0973187 ,
E              -3.09674088, -3.11574972, -3.11739926, -3.13428507, -3.14423858,
E              -3.15725277, -3.15946369, -3.18377784, -3.18919395, -3.19046305,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[14] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147FEE0>
angles_59993_Frame = (array([-40.66527459, -40.67246721, -40.67627249, -40.69149267,
       -40.67911466, -40.6191684 , -40.65948321, -40.6...40.60606463, -40.61245255, -40.73722975, -40.66850068,
       -40.72866239, -40.70571225, -40.72863101, -40.69482175]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00027593
E       Max relative difference: 6.75449247e-06
E        x: array([-40.66527459, -40.67246721, -40.67627249, -40.69149267,
E              -40.67911466, -40.6191684 , -40.65948321, -40.63527442,
E              -40.68299464, -40.65451106, -40.68866958, -40.71214638,...
E        y: array([-40.66512474, -40.67241874, -40.67640683, -40.69156202,
E              -40.67904125, -40.61931598, -40.65931648, -40.63526273,
E              -40.68301332, -40.65463956, -40.68871979, -40.71207107,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[15] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370157DE20>
angles_59993_Frame = (array([-2.11771875, -2.12136363, -2.10829787, -2.10560601, -2.09848764,
       -2.09013944, -2.08782837, -2.08355661,...13138, -2.00631586, -2.01653231, -2.02193502,
       -2.02010375, -2.03482968, -2.02918406, -2.03857165, -2.04266415]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 498 / 500 (99.6%)
E       Max absolute difference: 1.78180205e-05
E       Max relative difference: 8.3992535e-06
E        x: array([-2.11771875, -2.12136363, -2.10829787, -2.10560601, -2.09848764,
E              -2.09013944, -2.08782837, -2.08355661, -2.0829122 , -2.07797042,
E              -2.07597019, -2.07615875, -2.07266617, -2.06731508, -2.06628462,...
E        y: array([-2.117717  , -2.12138145, -2.10828981, -2.10560121, -2.09847833,
E              -2.0901373 , -2.08783559, -2.08355803, -2.08291439, -2.07796203,
E              -2.07597355, -2.07615058, -2.07265615, -2.06730923, -2.06628605,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[16] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701575250>
angles_59993_Frame = (array([6.52507868, 6.52171024, 6.52676181, 6.52615796, 6.52905291,
       6.53226092, 6.52482698, 6.52718079, 6.52520...3, 6.62460716, 6.61885229, 6.61866838, 6.61840113,
       6.61830494, 6.61145757, 6.61442751, 6.61800818, 6.61522877]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 9.96954874e-05
E       Max relative difference: 1.52869428e-05
E        x: array([6.52507868, 6.52171024, 6.52676181, 6.52615796, 6.52905291,
E              6.53226092, 6.52482698, 6.52718079, 6.52520403, 6.52670819,
E              6.52884739, 6.53489712, 6.53639001, 6.53856754, 6.53730991,...
E        y: array([6.52508343, 6.52161055, 6.52679385, 6.5261748 , 6.52909356,
E              6.53226331, 6.5247827 , 6.52716943, 6.5251909 , 6.52674323,
E              6.5288244 , 6.5349368 , 6.53643181, 6.53859086, 6.53729634,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[17] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701479C10>
angles_59993_Frame = (array([-36.20282575, -36.18851921, -36.20997244, -36.20740858,
       -36.21969843, -36.23331269, -36.20175693, -36.2...36.59897867, -36.59820574, -36.59708259, -36.5966783 ,
       -36.5678889 , -36.58037853, -36.59543103, -36.5837474 ]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00041711
E       Max relative difference: 1.15260529e-05
E        x: array([-36.20282575, -36.18851921, -36.20997244, -36.20740858,
E              -36.21969843, -36.23331269, -36.20175693, -36.21175121,
E              -36.20335805, -36.20974478, -36.21882605, -36.24449665,...
E        y: array([-36.20285232, -36.18810211, -36.21011484, -36.2074865 ,
E              -36.21987736, -36.23332923, -36.20157529, -36.21170938,
E              -36.20330871, -36.20989995, -36.2187349 , -36.24467136,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[18] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014BD4F0>
angles_59993_Frame = (array([0.74182469, 0.74887327, 0.74734644, 0.74472932, 0.73343012,
       0.74439548, 0.72943302, 0.73727376, 0.72081... , 0.3566625 , 0.35510055, 0.34638205, 0.3284721 ,
       0.33930884, 0.32176366, 0.33825182, 0.33665768, 0.33370761]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 499 / 500 (99.8%)
E       Max absolute difference: 1.72139913e-05
E       Max relative difference: 5.7697929e-05
E        x: array([0.74182469, 0.74887327, 0.74734644, 0.74472932, 0.73343012,
E              0.74439548, 0.72943302, 0.73727376, 0.72081494, 0.72123893,
E              0.70553527, 0.70882977, 0.66531228, 0.68033502, 0.69804954,...
E        y: array([0.74183155, 0.74887508, 0.7473377 , 0.74472418, 0.73343341,
E              0.74438687, 0.72944162, 0.73727377, 0.72081165, 0.72122939,
E              0.70553038, 0.70883233, 0.66529983, 0.68033827, 0.69804766,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[19] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014896D0>
angles_59993_Frame = (array([3.69553775, 3.69552046, 3.69442794, 3.69097953, 3.69148567,
       3.69773154, 3.69183538, 3.69287489, 3.68686...8, 3.63388226, 3.6302982 , 3.63543634, 3.62527623,
       3.63545506, 3.63248219, 3.63856254, 3.63755422, 3.64311323]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 3.1492682e-05
E       Max relative difference: 8.65942172e-06
E        x: array([3.69553775, 3.69552046, 3.69442794, 3.69097953, 3.69148567,
E              3.69773154, 3.69183538, 3.69287489, 3.68686459, 3.68814694,
E              3.68067875, 3.67942725, 3.67790887, 3.67708608, 3.68180036,...
E        y: array([3.69551951, 3.69551349, 3.69444258, 3.69098673, 3.69147533,
E              3.69774653, 3.69181387, 3.69287175, 3.6868679 , 3.68816253,
E              3.68068464, 3.67941862, 3.67793112, 3.67707608, 3.68180199,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[20] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B6FD0>
angles_59993_Frame = (array([-24.91152851, -24.91140397, -24.90353538, -24.87869262,
       -24.88233953, -24.92732555, -24.88485921, -24.8...24.43987533, -24.4771509 , -24.40342109, -24.47728669,
       -24.45572219, -24.49981966, -24.49250897, -24.53280284]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.0002126
E       Max relative difference: 8.68192129e-06
E        x: array([-24.91152851, -24.91140397, -24.90353538, -24.87869262,
E              -24.88233953, -24.92732555, -24.88485921, -24.89234829,
E              -24.84903488, -24.85827872, -24.8044245 , -24.79539507,...
E        y: array([-24.91138147, -24.91133812, -24.90362522, -24.87872883,
E              -24.88224937, -24.92741783, -24.88468857, -24.89231003,
E              -24.84904309, -24.85837542, -24.80445127, -24.79531711,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[33] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701588A90>
angles_59993_Frame = (array([1.49511545, 1.55334401, 1.59922552, 1.63686907, 1.67663795,
       1.70692566, 1.7441335 , 1.78995685, 1.82780...7, 5.4117701 , 5.42793806, 5.43097034, 5.4392295 ,
       5.44365864, 5.45468641, 5.45465521, 5.46603923, 5.46742505]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 5.32569631e-05
E       Max relative difference: 2.50709963e-05
E        x: array([1.49511545, 1.55334401, 1.59922552, 1.63686907, 1.67663795,
E              1.70692566, 1.7441335 , 1.78995685, 1.82780082, 1.8676479 ,
E              1.89151619, 1.92771887, 1.96436854, 1.99935882, 2.03566031,...
E        y: array([1.49511373, 1.55336866, 1.59920064, 1.6368678 , 1.67666053,
E              1.70695001, 1.74415801, 1.78995811, 1.82782335, 1.86764592,
E              1.89153905, 1.92774341, 1.96439152, 1.99935782, 2.03563514,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[34] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014B63A0>
angles_59993_Frame = (array([-9.29040796, -9.3010472 , -9.32441776, -9.34359738, -9.3590444 ,
       -9.38191471, -9.40419716, -9.42738553,...88467, -9.50999381, -9.52665944, -9.5320169 ,
       -9.53519369, -9.52701522, -9.52004672, -9.51490295, -9.518154  ]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 499 / 500 (99.8%)
E       Max absolute difference: 5.88691716e-05
E       Max relative difference: 6.37721769e-06
E        x: array([-9.29040796, -9.3010472 , -9.32441776, -9.34359738, -9.3590444 ,
E              -9.38191471, -9.40419716, -9.42738553, -9.44068161, -9.46207102,
E              -9.48260514, -9.49836878, -9.51846451, -9.54114678, -9.55337939,...
E        y: array([-9.29040736, -9.30102292, -9.32438885, -9.34359747, -9.35907361,
E              -9.38189032, -9.40417237, -9.42733324, -9.44071085, -9.46207013,
E              -9.48263355, -9.49834451, -9.51849328, -9.54114686, -9.55335063,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[35] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370159BA00>
angles_59993_Frame = (array([18.36571563, 18.45574511, 18.55463466, 18.65680474, 18.7545897 ,
       18.89224389, 19.01102766, 19.14253941,...26203, 15.29824414, 15.29100459, 15.27182016,
       15.2472143 , 15.24383169, 15.24408575, 15.24932744, 15.25058102]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 2.12906114e-05
E       Max relative difference: 1.17014896e-06
E        x: array([18.36571563, 18.45574511, 18.55463466, 18.65680474, 18.7545897 ,
E              18.89224389, 19.01102766, 19.14253941, 19.2742351 , 19.3707834 ,
E              19.51621272, 19.62819901, 19.7552467 , 19.85435917, 19.95170072,...
E        y: array([18.3657149 , 18.45573471, 18.55463148, 18.65680335, 18.75459273,
E              18.89223431, 19.01101833, 19.14252392, 19.27423788, 19.37078137,
E              19.51621685, 19.62818924, 19.75525057, 19.85435995, 19.9516974 ,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[36] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370157D4C0>
angles_59993_Frame = (array([-15.51945878, -15.53002489, -15.53571439, -15.54887517,
       -15.56087877, -15.57851101, -15.58922837, -15.6...14.91277397, -14.92450295, -14.92833015, -14.93169813,
       -14.92972199, -14.91319745, -14.91609858, -14.91715669]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00025838
E       Max relative difference: 1.73345113e-05
E        x: array([-15.51945878, -15.53002489, -15.53571439, -15.54887517,
E              -15.56087877, -15.57851101, -15.58922837, -15.61204927,
E              -15.63701624, -15.65020433, -15.67236488, -15.69969564,...
E        y: array([-15.51951164, -15.5299152 , -15.53580961, -15.54871705,
E              -15.56105381, -15.57832586, -15.58927397, -15.61208449,
E              -15.63711082, -15.65029246, -15.67235792, -15.69961318,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[37] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014BDC70>
angles_59993_Frame = (array([-0.17702749, -0.17729746, -0.17144787, -0.16176723, -0.15888202,
       -0.15231338, -0.14980806, -0.14160843,...58742, -0.05272922, -0.04971933, -0.04812709,
       -0.04318624, -0.04916101, -0.04531359, -0.03887207, -0.03834449]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00022673
E       Max relative difference: 0.00454189
E        x: array([-0.17702749, -0.17729746, -0.17144787, -0.16176723, -0.15888202,
E              -0.15231338, -0.14980806, -0.14160843, -0.14261431, -0.13682369,
E              -0.13640408, -0.12386418, -0.13196765, -0.12928711, -0.13085033,...
E        y: array([-0.17698791, -0.17744464, -0.17132895, -0.16185869, -0.158726  ,
E              -0.15231705, -0.14988259, -0.14171907, -0.14267843, -0.13680477,
E              -0.13640701, -0.12388125, -0.13192499, -0.12926045, -0.13094901,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[38] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014D5A60>
angles_59993_Frame = (array([-0.30118398, -0.28176985, -0.27923808, -0.25813621, -0.23929052,
       -0.23166942, -0.22126066, -0.20020827,...9969 ,  0.32180757,  0.29528399,  0.28945197,
        0.28958453,  0.27241083,  0.26051487,  0.2520001 ,  0.23865155]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 500 / 500 (100%)
E       Max absolute difference: 0.00022776
E       Max relative difference: 0.25343297
E        x: array([-0.30118398, -0.28176985, -0.27923808, -0.25813621, -0.23929052,
E              -0.23166942, -0.22126066, -0.20020827, -0.19058518, -0.17553654,
E              -0.16303462, -0.147947  , -0.14199646, -0.12826932, -0.12175612,...
E        y: array([-0.30137307, -0.28179193, -0.27908295, -0.25799391, -0.23922412,
E              -0.2316144 , -0.22122019, -0.20018651, -0.19070374, -0.17554251,
E              -0.16297516, -0.1480987 , -0.14199511, -0.1283537 , -0.12191312,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[39] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014D3550>
angles_59993_Frame = (array([-19.42916335, -19.42281104, -19.42261757, -19.41713486,
       -19.41970423, -19.43249124, -19.4373488 , -19.4...19.10331923, -19.09874612, -19.09139434, -19.07627284,
       -19.06422294, -19.06387621, -19.05436292, -19.04171913]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 497 / 500 (99.4%)
E       Max absolute difference: 1.00718059e-05
E       Max relative difference: 5.30058299e-07
E        x: array([-19.42916335, -19.42281104, -19.42261757, -19.41713486,
E              -19.41970423, -19.43249124, -19.4373488 , -19.45184548,
E              -19.46728029, -19.4669766 , -19.47653559, -19.48028384,...
E        y: array([-19.4291564 , -19.42281012, -19.4226169 , -19.41712675,
E              -19.41970349, -19.43249183, -19.43734771, -19.45184568,
E              -19.46728005, -19.4669743 , -19.47654278, -19.48027726,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[40] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014FCAF0>
angles_59993_Frame = (array([77.90078999, 77.86514138, 77.85293797, 77.83247997, 77.81193395,
       77.80405191, 77.80412888, 77.80801052,...57042, 77.10687464, 77.10935565, 77.10075006,
       77.10814803, 77.1049169 , 77.11533216, 77.11966307, 77.13409983]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 492 / 500 (98.4%)
E       Max absolute difference: 3.04617788e-06
E       Max relative difference: 3.93423069e-08
E        x: array([77.90078999, 77.86514138, 77.85293797, 77.83247997, 77.81193395,
E              77.80405191, 77.80412888, 77.80801052, 77.81057463, 77.80369158,
E              77.79972923, 77.79728385, 77.80289031, 77.81595462, 77.81606311,...
E        y: array([77.90078699, 77.86514119, 77.85293729, 77.83247823, 77.81193466,
E              77.80405196, 77.80412894, 77.80801153, 77.81057501, 77.8036908 ,
E              77.79973167, 77.79728105, 77.80289059, 77.81595506, 77.81606332,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[41] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370147F520>
angles_59993_Frame = (array([-19.71380107, -19.69902635, -19.69074285, -19.71218566,
       -19.70784403, -19.69013238, -19.6589967 , -19.5...20.13596435, -20.17080243, -20.19911231, -20.17066746,
       -20.17863196, -20.10772541, -20.11361559, -20.12850177]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 494 / 500 (98.8%)
E       Max absolute difference: 5.81729668e-05
E       Max relative difference: 2.87665821e-06
E        x: array([-19.71380107, -19.69902635, -19.69074285, -19.71218566,
E              -19.70784403, -19.69013238, -19.6589967 , -19.58142718,
E              -19.51113598, -19.52162368, -19.52776265, -19.56838838,...
E        y: array([-19.71385708, -19.69902465, -19.69074308, -19.71223845,
E              -19.70784162, -19.69013504, -19.65899663, -19.58142568,
E              -19.51113557, -19.52162449, -19.52770727, -19.56844288,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[42] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E7E20>
angles_59993_Frame = (array([-18.45178827, -18.47068561, -18.47492443, -18.48832551,
       -18.49530295, -18.49602997, -18.50140764, -18.5...18.11594338, -18.12212254, -18.13170428, -18.16692231,
       -18.17840959, -18.17630247, -18.20393907, -18.20982701]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 498 / 500 (99.6%)
E       Max absolute difference: 1.2167199e-05
E       Max relative difference: 6.62385832e-07
E        x: array([-18.45178827, -18.47068561, -18.47492443, -18.48832551,
E              -18.49530295, -18.49602997, -18.50140764, -18.50416916,
E              -18.52133981, -18.52506522, -18.53708326, -18.53374181,...
E        y: array([-18.4517883 , -18.4706954 , -18.47493421, -18.48833565,
E              -18.49530325, -18.49603019, -18.50140753, -18.5041605 ,
E              -18.52135019, -18.52505729, -18.53707328, -18.53373037,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[43] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701588A00>
angles_59993_Frame = (array([69.50128006, 69.49539702, 69.47304024, 69.45812384, 69.43008407,
       69.43194032, 69.39175366, 69.38371952,...68021, 69.59186429, 69.61105729, 69.63606549,
       69.67438935, 69.70884125, 69.71670636, 69.76457723, 69.78052414]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 490 / 500 (98%)
E       Max absolute difference: 2.65243594e-06
E       Max relative difference: 3.80910907e-08
E        x: array([69.50128006, 69.49539702, 69.47304024, 69.45812384, 69.43008407,
E              69.43194032, 69.39175366, 69.38371952, 69.3843382 , 69.38717413,
E              69.38990049, 69.40724788, 69.41388627, 69.39731363, 69.40692631,...
E        y: array([69.50128084, 69.49539863, 69.4730424 , 69.45812523, 69.43008335,
E              69.43194046, 69.39175325, 69.38371729, 69.38433973, 69.38717271,
E              69.38989843, 69.40724654, 69.41388599, 69.39731333, 69.40692781,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[44] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701491700>
angles_59993_Frame = (array([-50.54543621, -50.50178852, -50.49829299, -50.49143808,
       -50.54494256, -50.49562976, -50.55062577, -50.5...50.59462081, -50.58070665, -50.55512228, -50.45846049,
       -50.45709352, -50.52293026, -50.4125018 , -50.45056679]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 497 / 500 (99.4%)
E       Max absolute difference: 5.85180563e-05
E       Max relative difference: 1.16259942e-06
E        x: array([-50.54543621, -50.50178852, -50.49829299, -50.49143808,
E              -50.54494256, -50.49562976, -50.55062577, -50.55467141,
E              -50.47325742, -50.47880526, -50.43466974, -50.39037953,...
E        y: array([-50.54543862, -50.50173286, -50.49823735, -50.49138916,
E              -50.5449335 , -50.49562413, -50.55063162, -50.55471098,
E              -50.47321021, -50.47885536, -50.43472354, -50.39042657,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[45] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A6550>
angles_59993_Frame = (array([25.31329071, 25.32746454, 25.31828619, 25.3290244 , 25.33050069,
       25.34251095, 25.34185069, 25.35015656,...34523, 25.47840585, 25.46901799, 25.47067636,
       25.47353385, 25.46535916, 25.47947614, 25.47426264, 25.46505591]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 490 / 500 (98%)
E       Max absolute difference: 1.16884596e-05
E       Max relative difference: 4.57684917e-07
E        x: array([25.31329071, 25.32746454, 25.31828619, 25.3290244 , 25.33050069,
E              25.34251095, 25.34185069, 25.35015656, 25.35621393, 25.3516831 ,
E              25.35693215, 25.34055865, 25.33454965, 25.33064323, 25.34371115,...
E        y: array([25.31328269, 25.32746692, 25.31828612, 25.3290189 , 25.33050316,
E              25.34250958, 25.34185062, 25.35015559, 25.35621395, 25.35168401,
E              25.35694013, 25.34055423, 25.33455216, 25.33064079, 25.34371009,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[48] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014913A0>
angles_59993_Frame = (array([33.21125669, 33.2081563 , 33.20482436, 33.20932136, 33.20931968,
       33.20820695, 33.22352548, 33.21876724,...28271, 33.26912888, 33.26694445, 33.26250371,
       33.24835622, 33.24846428, 33.2477157 , 33.23537031, 33.22564971]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 492 / 500 (98.4%)
E       Max absolute difference: 8.06170357e-06
E       Max relative difference: 2.42685153e-07
E        x: array([33.21125669, 33.2081563 , 33.20482436, 33.20932136, 33.20931968,
E              33.20820695, 33.22352548, 33.21876724, 33.23641651, 33.22957836,
E              33.23139304, 33.21897013, 33.21754787, 33.22737846, 33.23770023,...
E        y: array([33.21125544, 33.20815785, 33.2048259 , 33.20931882, 33.20932507,
E              33.20820993, 33.22352249, 33.2187753 , 33.23641279, 33.22958101,
E              33.23139269, 33.21897379, 33.217549  , 33.2273785 , 33.23769345,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[51] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701479CA0>
angles_59993_Frame = (array([5.31744385, 5.27226542, 5.26662765, 5.26863609, 5.269922  ,
       5.23228385, 5.21648431, 5.18248624, 5.12653...5, 2.73248205, 2.71855882, 2.74854063, 2.7785813 ,
       2.79161734, 2.80619991, 2.78013974, 2.77958442, 2.78795723]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 480 / 500 (96%)
E       Max absolute difference: 2.45782663e-05
E       Max relative difference: 9.3513798e-06
E        x: array([5.31744385, 5.27226542, 5.26662765, 5.26863609, 5.269922  ,
E              5.23228385, 5.21648431, 5.18248624, 5.126538  , 5.12586916,
E              5.07653614, 5.10096395, 5.05759425, 5.02620457, 4.98491396,...
E        y: array([5.31744841, 5.27225413, 5.26662761, 5.26862962, 5.26991074,
E              5.23228943, 5.21648428, 5.18249199, 5.12653801, 5.12586335,
E              5.07653098, 5.10095209, 5.05758304, 5.02621581, 4.98491971,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[52] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014FCCA0>
angles_59993_Frame = (array([16.20090098, 16.28785465, 16.39869813, 16.45115031, 16.50966277,
       16.50786905, 16.50928141, 16.5607865 ,...61053, 18.61098801, 18.61619709, 18.61770493,
       18.61325162, 18.59405332, 18.62184348, 18.62335338, 18.59382712]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 465 / 500 (93%)
E       Max absolute difference: 6.2625173e-05
E       Max relative difference: 3.87366222e-06
E        x: array([16.20090098, 16.28785465, 16.39869813, 16.45115031, 16.50966277,
E              16.50786905, 16.50928141, 16.5607865 , 16.68753783, 16.76058999,
E              16.81553742, 16.78986312, 16.77312446, 16.89198778, 17.11344115,...
E        y: array([16.20084386, 16.28785753, 16.39869815, 16.45109621, 16.50966562,
E              16.50786954, 16.50928143, 16.56078312, 16.68753782, 16.7605934 ,
E              16.8155941 , 16.78981258, 16.77312725, 16.89198498, 17.11343775,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[53] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A4AC0>
angles_59993_Frame = (array([122.98854002, 122.9317489 , 122.98931121, 122.97083598,
       123.06756505, 123.05692004, 123.03625375, 122.9...20.65065507, 120.69328339, 120.76867854, 120.74853196,
       120.80091035, 120.71769651, 120.7238505 , 120.79684896]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 476 / 500 (95.2%)
E       Max absolute difference: 0.00014117
E       Max relative difference: 1.17525825e-06
E        x: array([122.98854002, 122.9317489 , 122.98931121, 122.97083598,
E              123.06756505, 123.05692004, 123.03625375, 122.99693402,
E              122.97023237, 122.95018042, 122.98952048, 123.08507803,...
E        y: array([122.9886742 , 122.93175195, 122.98931118, 122.97097329,
E              123.06756815, 123.05691506, 123.03625372, 122.99693594,
E              122.97023238, 122.95017842, 122.98938641, 123.08521347,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[54] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701563070>
angles_59993_Frame = (array([-18.78471222, -18.80031053, -18.80840003, -18.80104658,
       -18.78055393, -18.81588896, -18.81529354, -18.8...18.89290334, -18.88888629, -18.89099124, -18.87279196,
       -18.92062044, -18.95534232, -18.96946292, -18.95652563]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 478 / 500 (95.6%)
E       Max absolute difference: 4.86919039e-05
E       Max relative difference: 2.60869951e-06
E        x: array([-18.78471222, -18.80031053, -18.80840003, -18.80104658,
E              -18.78055393, -18.81588896, -18.81529354, -18.83011977,
E              -18.86814997, -18.8517797 , -18.86674748, -18.88399655,...
E        y: array([-18.78470462, -18.80028605, -18.80837556, -18.80101384,
E              -18.78056977, -18.81588953, -18.81529297, -18.83016831,
E              -18.86810962, -18.8518124 , -18.86677964, -18.88403697,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[55] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237111D1610>
angles_59993_Frame = (array([-6.13361733e-02, -5.81487419e-02, -5.34049639e-02, -7.03636782e-02,
       -8.25683841e-02, -7.97389300e-02, -...229e-01,  3.10423835e-01,  3.48920019e-01,
        3.25269526e-01,  3.24305869e-01,  3.04900454e-01,  3.40999868e-01]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 480 / 500 (96%)
E       Max absolute difference: 4.58090181e-05
E       Max relative difference: 0.09036049
E        x: array([-6.13361733e-02, -5.81487419e-02, -5.34049639e-02, -7.03636782e-02,
E              -8.25683841e-02, -7.97389300e-02, -7.80082301e-02, -7.67929934e-02,
E              -4.40274349e-02, -9.04537288e-02, -1.08793809e-01, -1.06034462e-01,...
E        y: array([-6.13429494e-02, -5.81101170e-02, -5.33663530e-02, -7.03348057e-02,
E              -8.25518653e-02, -7.97360005e-02, -7.80111603e-02, -7.68053188e-02,
E              -4.40054540e-02, -9.04825594e-02, -1.08825595e-01, -1.06056428e-01,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
_____________________ TestCSVOutput.test_59993_Frame[56] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014918E0>
angles_59993_Frame = (array([-30.7092175 , -30.72925761, -30.73712404, -30.72658557,
       -30.73464227, -30.75799251, -30.67620846, -30.6...30.49339285, -30.48310106, -30.48870156, -30.63820536,
       -30.59049641, -30.46694851, -30.59452317, -30.52567426]))

    @pytest.mark.parametrize("angles_59993_Frame", get_columns_to_compare("59993_Frame"), indirect=True)
    def test_59993_Frame(self, angles_59993_Frame):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_59993_Frame
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 481 / 500 (96.2%)
E       Max absolute difference: 7.31770839e-05
E       Max relative difference: 2.41695016e-06
E        x: array([-30.7092175 , -30.72925761, -30.73712404, -30.72658557,
E              -30.73464227, -30.75799251, -30.67620846, -30.67737914,
E              -30.77847489, -30.76679327, -30.79814238, -30.84628099,...
E        y: array([-30.70920861, -30.7292054 , -30.73707186, -30.72652797,
E              -30.73465651, -30.75798891, -30.67621208, -30.67745093,
E              -30.77840798, -30.76685092, -30.79820374, -30.84634757,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:354: AssertionError
______________________ TestCSVOutput.test_Test_Files[3] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701556FD0>
angles_Test_Files = (array([48.01133901, 48.51406896, 49.10114735, 49.74145353, 50.40911423,
       51.06890963, 51.68906106, 52.23845196,...106, 35.2966, 35.5851, 35.8647,
       36.1242, 36.3535, 36.5443, 36.6912, 36.7926, 36.8515, 36.8763,
       36.8816]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 116 / 323 (35.9%)
E       Max absolute difference: 0.00405968
E       Max relative difference: 0.00012601
E        x: array([48.011, 48.514, 49.101, 49.741, 50.409, 51.069, 51.689, 52.238,
E              52.715, 53.096, 53.371, 53.543, 53.608, 53.565, 53.421, 53.189,
E              52.87 , 52.464, 51.987, 51.45 , 50.851, 50.204, 49.512, 48.779,...
E        y: array([48.011, 48.511, 49.097, 49.741, 50.409, 51.067, 51.686, 52.242,
E              52.716, 53.095, 53.372, 53.542, 53.606, 53.565, 53.424, 53.189,
E              52.867, 52.465, 51.99 , 51.451, 50.854, 50.206, 49.512, 48.778,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[4] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014C19A0>
angles_Test_Files = (array([-4.71913417, -4.66552859, -4.59146362, -4.50068196, -4.38339574,
       -4.24097847, -4.08660166, -3.90754234,...023   ,
        2.51377  ,  2.79817  ,  3.04436  ,  3.24254  ,  3.38598  ,
        3.47333  ,  3.51171  ,  3.52018  ]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 156 / 323 (48.3%)
E       Max absolute difference: 0.00369279
E       Max relative difference: 0.07718482
E        x: array([-4.719, -4.666, -4.591, -4.501, -4.383, -4.241, -4.087, -3.908,
E              -3.718, -3.519, -3.313, -3.098, -2.879, -2.669, -2.461, -2.261,
E              -2.078, -1.904, -1.745, -1.6  , -1.469, -1.366, -1.276, -1.208,...
E        y: array([-4.72 , -4.667, -4.593, -4.498, -4.382, -4.244, -4.086, -3.911,
E              -3.721, -3.52 , -3.311, -3.097, -2.883, -2.67 , -2.464, -2.265,
E              -2.077, -1.902, -1.742, -1.598, -1.472, -1.364, -1.276, -1.207,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[5] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370159BBE0>
angles_Test_Files = (array([36.91516   , 36.56239598, 36.13719601, 35.66271566, 35.1732556 ,
       34.6724109 , 34.19865876, 33.76262871,...383, 38.0582, 38.3721, 38.6781,
       38.9723, 39.2484, 39.4973, 39.7078, 39.8689, 39.9725, 40.0204,
       40.0313]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 78 / 323 (24.1%)
E       Max absolute difference: 0.0044556
E       Max relative difference: 0.00012669
E        x: array([36.915, 36.562, 36.137, 35.663, 35.173, 34.672, 34.199, 33.763,
E              33.382, 33.066, 32.826, 32.664, 32.57 , 32.546, 32.592, 32.693,
E              32.839, 33.018, 33.213, 33.418, 33.623, 33.818, 33.997, 34.155,...
E        y: array([36.918, 36.56 , 36.136, 35.664, 35.169, 34.673, 34.198, 33.763,
E              33.383, 33.068, 32.827, 32.661, 32.57 , 32.55 , 32.594, 32.694,
E              32.837, 33.014, 33.211, 33.417, 33.623, 33.818, 33.996, 34.152,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[6] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701546A90>
angles_Test_Files = (array([38.64865723, 38.58988048, 38.51291042, 38.41420063, 38.2983173 ,
       38.17344287, 38.03284881, 37.87369674,...681, 28.7218, 29.0175, 29.341 ,
       29.6752, 30.0004, 30.2963, 30.5442, 30.7294, 30.8451, 30.8969,
       30.9085]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 121 / 323 (37.5%)
E       Max absolute difference: 0.00407359
E       Max relative difference: 0.00012552
E        x: array([38.649, 38.59 , 38.513, 38.414, 38.298, 38.173, 38.033, 37.874,
E              37.716, 37.555, 37.387, 37.225, 37.073, 36.926, 36.792, 36.682,
E              36.592, 36.517, 36.466, 36.445, 36.441, 36.464, 36.512, 36.577,...
E        y: array([38.648, 38.588, 38.509, 38.413, 38.3  , 38.171, 38.03 , 37.877,
E              37.717, 37.553, 37.388, 37.226, 37.071, 36.926, 36.795, 36.682,
E              36.589, 36.518, 36.47 , 36.445, 36.445, 36.467, 36.512, 36.577,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[7] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014E6670>
angles_Test_Files = (array([ 1.31842322e+00,  1.26013651e+00,  1.18410522e+00,  1.09810924e+00,
        9.93217188e-01,  8.72720828e-01,  ...e+00,
       -2.73915e+00, -3.07352e+00, -3.34635e+00, -3.54655e+00,
       -3.67008e+00, -3.72493e+00, -3.73713e+00]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 159 / 323 (49.2%)
E       Max absolute difference: 0.00366349
E       Max relative difference: 0.84239067
E        x: array([ 1.318e+00,  1.260e+00,  1.184e+00,  1.098e+00,  9.932e-01,
E               8.727e-01,  7.500e-01,  6.120e-01,  4.732e-01,  3.343e-01,
E               1.953e-01,  5.686e-02, -7.972e-02, -2.001e-01, -3.113e-01,...
E        y: array([ 1.319e+00,  1.261e+00,  1.186e+00,  1.096e+00,  9.912e-01,
E               8.749e-01,  7.488e-01,  6.151e-01,  4.764e-01,  3.351e-01,
E               1.940e-01,  5.589e-02, -7.616e-02, -1.988e-01, -3.085e-01,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[8] _______________________

self = <test_csvOutput.TestCSVOutput object at 0x0000023701479310>
angles_Test_Files = (array([36.30686858, 36.0534483 , 35.77711868, 35.49199534, 35.21675719,
       34.97859702, 34.7910768 , 34.66968347,...557, 36.909 , 36.6802, 36.4775,
       36.3076, 36.175 , 36.081 , 36.0225, 35.9927, 35.9819, 35.98  ,
       35.98  ]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 100 / 323 (31%)
E       Max absolute difference: 0.00601223
E       Max relative difference: 0.00016895
E        x: array([36.307, 36.053, 35.777, 35.492, 35.217, 34.979, 34.791, 34.67 ,
E              34.617, 34.64 , 34.737, 34.9  , 35.13 , 35.416, 35.745, 36.112,
E              36.506, 36.915, 37.337, 37.754, 38.163, 38.562, 38.934, 39.289,...
E        y: array([36.304, 36.055, 35.778, 35.492, 35.219, 34.981, 34.794, 34.67 ,
E              34.618, 34.639, 34.735, 34.9  , 35.129, 35.414, 35.745, 36.113,
E              36.507, 36.918, 37.336, 37.753, 38.163, 38.559, 38.936, 39.291,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[10] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237014A60A0>
angles_Test_Files = (array([54.70761346, 54.1922602 , 53.59183278, 52.93398831, 52.25444133,
       51.55992141, 50.87239562, 50.18848166,...  5.3152  ,  6.22516 ,  7.0492  ,  7.76748 ,  8.36311 ,
        8.824   ,  9.14575 ,  9.33548 ,  9.41663 ,  9.43418 ]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 13 / 323 (4.02%)
E       Max absolute difference: 0.00254133
E       Max relative difference: 0.00083155
E        x: array([54.708, 54.192, 53.592, 52.934, 52.254, 51.56 , 50.872, 50.188,
E              49.496, 48.777, 48.01 , 47.167, 46.217, 45.14 , 43.925, 42.56 ,
E              41.046, 39.39 , 37.603, 35.704, 33.716, 31.661, 29.561, 27.442,...
E        y: array([54.709, 54.191, 53.591, 52.936, 52.252, 51.561, 50.873, 50.188,
E              49.496, 48.778, 48.01 , 47.165, 46.216, 45.142, 43.926, 42.561,
E              41.046, 39.388, 37.601, 35.703, 33.715, 31.66 , 29.561, 27.441,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[13] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x00000237015965B0>
angles_Test_Files = (array([18.50266407, 18.55471739, 18.63118043, 18.73199121, 18.86191918,
       19.02129505, 19.21322476, 19.43949757,... 45.5039 , 46.3095 , 47.0227 , 47.6372 , 48.1504 , 48.5633 ,
       48.8785 , 49.0999 , 49.2339 , 49.2933 , 49.3066 ]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 13 / 323 (4.02%)
E       Max absolute difference: 0.00270375
E       Max relative difference: 0.00013164
E        x: array([18.503, 18.555, 18.631, 18.732, 18.862, 19.021, 19.213, 19.439,
E              19.699, 19.992, 20.321, 20.681, 21.075, 21.498, 21.95 , 22.427,
E              22.929, 23.45 , 23.991, 24.545, 25.112, 25.691, 26.277, 26.873,...
E        y: array([18.502, 18.555, 18.631, 18.732, 18.862, 19.022, 19.214, 19.44 ,
E              19.699, 19.992, 20.32 , 20.681, 21.074, 21.498, 21.95 , 22.428,
E              22.929, 23.451, 23.99 , 24.545, 25.112, 25.69 , 26.277, 26.873,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
______________________ TestCSVOutput.test_Test_Files[36] ______________________

self = <test_csvOutput.TestCSVOutput object at 0x000002370154E670>
angles_Test_Files = (array([-25.74168594, -25.58568702, -25.40177938, -25.19417876,
       -24.98425766, -24.76910282, -24.56430447, -24.3... -33.7638, -33.6557, -33.5341, -33.4036, -33.2708, -33.144 ,
       -33.0325, -32.9452, -32.8882, -32.8618, -32.8557]))

    @pytest.mark.parametrize("angles_Test_Files", get_columns_to_compare("Test_Files"), indirect=True)
    def test_Test_Files(self, angles_Test_Files):
        """
        Tests pycgm output csv files using input files from SampleData/ROM/.
        """
        result_angles, expected_angles = angles_Test_Files
>       np.testing.assert_almost_equal(result_angles, expected_angles, 3)
E       AssertionError: 
E       Arrays are not almost equal to 3 decimals
E       
E       Mismatched elements: 31 / 323 (9.6%)
E       Max absolute difference: 0.00206067
E       Max relative difference: 7.62513642e-05
E        x: array([-25.742, -25.586, -25.402, -25.194, -24.984, -24.769, -24.564,
E              -24.376, -24.208, -24.063, -23.948, -23.858, -23.798, -23.763,
E              -23.76 , -23.784, -23.837, -23.909, -24.007, -24.121, -24.251,...
E        y: array([-25.742, -25.585, -25.4  , -25.196, -24.983, -24.77 , -24.566,
E              -24.377, -24.208, -24.064, -23.946, -23.857, -23.796, -23.764,
E              -23.761, -23.785, -23.836, -23.91 , -24.006, -24.121, -24.252,...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_csvOutput.py:367: AssertionError
_ TestPycgmCalc.test_calcAngles_angles_and_axis[kargs0-1-expected_first_angle0-expected_first_axis0] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023712B7C790>
kargs = {'frame': 25, 'vsk': {'Bodymass': 75.0, 'GCS': [[1, 0, 0], [0, 1, 0], [0, 0, 1]], 'HeadOffset': 0.25719903208740524, 'InterAsisDistance': 215.908996582031, ...}}
expected_len_result = 1
expected_first_angle = array([-0.28586517, -6.16733918,  7.43502326])
expected_first_axis = array([[ 252.09220886,  393.2449646 , 1032.81604004],
       [ 252.22214051,  394.23081787, 1032.71015762],
       [ 251.10069832,  393.37361742, 1032.79719092],
       [ 252.08724847,  393.35239723, 1033.81024003]])

    @pytest.mark.parametrize("kargs, expected_len_result, expected_first_angle, expected_first_axis", [
        #All of the following tests return angles and axis
        #Calculate for only one frame
        ({'frame' : 25}, 1,
        np.array([-0.28586517, -6.16733918,  7.43502326]),
        np.array([[ 252.09220886,  393.2449646 , 1032.81604004],
                  [ 252.22214051,  394.23081787, 1032.71015762],
                  [ 251.10069832,  393.37361742, 1032.79719092],
                  [ 252.08724847,  393.35239723, 1033.81024003]])),
        #Calculate for a range of frames
        ({'start': 2, 'end': 4}, 2,
        np.array([-0.30389522, -6.12213066,  7.55373785]),
        np.array([[ 251.62969971,  391.89085388, 1032.89422607],
                  [ 251.76171462,  392.8765222 , 1032.78920216],
                  [ 250.63846601,  392.02156018, 1032.87494881],
                  [ 251.62442601,  391.99750201, 1033.88850891]]))
    ])
    def test_calcAngles_angles_and_axis(self, kargs, expected_len_result, expected_first_angle, expected_first_axis):
        """
        This function tests pycgmCalc.calcAngles(data, **kargs),
        where data is the motion capture data to calculate angles for,
        and **kargs contains many options for how to return the calculated
        data.
    
        The 'vsk' argument in **kargs is required and used in all tests.
    
        The previously loaded motion_data in setup_class() is used
        for testing.
    
        This function only tests the usage of key word arguments to
        customize the layout format, not the accuracy of the results.
    
        We test the usage of calcAngles() to return both angles and
        axis.
        """
        kargs['vsk'] = self.cal_SM
        angles, axis = pycgmCalc.calcAngles(self.motion_data, **kargs)
        np.testing.assert_equal(len(angles), expected_len_result)
        np.testing.assert_equal(len(axis), expected_len_result)
>       np.testing.assert_almost_equal(angles[0][0], expected_first_angle, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.00063086
E       Max relative difference: 0.00019939
E        x: array([-0.28580817, -6.16671917,  7.43565412])
E        y: array([-0.28586517, -6.16733918,  7.43502326])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:71: AssertionError
---------------------------- Captured stdout setup ----------------------------
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData/ROM/Sample_Dynamic.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData/ROM/Sample_Static.c3d
_ TestPycgmCalc.test_calcAngles_angles_and_axis[kargs1-2-expected_first_angle1-expected_first_axis1] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717AC3160>
kargs = {'end': 4, 'start': 2, 'vsk': {'Bodymass': 75.0, 'GCS': [[1, 0, 0], [0, 1, 0], [0, 0, 1]], 'HeadOffset': 0.25719903208740524, 'InterAsisDistance': 215.908996582031, ...}}
expected_len_result = 2
expected_first_angle = array([-0.30389522, -6.12213066,  7.55373785])
expected_first_axis = array([[ 251.62969971,  391.89085388, 1032.89422607],
       [ 251.76171462,  392.8765222 , 1032.78920216],
       [ 250.63846601,  392.02156018, 1032.87494881],
       [ 251.62442601,  391.99750201, 1033.88850891]])

    @pytest.mark.parametrize("kargs, expected_len_result, expected_first_angle, expected_first_axis", [
        #All of the following tests return angles and axis
        #Calculate for only one frame
        ({'frame' : 25}, 1,
        np.array([-0.28586517, -6.16733918,  7.43502326]),
        np.array([[ 252.09220886,  393.2449646 , 1032.81604004],
                  [ 252.22214051,  394.23081787, 1032.71015762],
                  [ 251.10069832,  393.37361742, 1032.79719092],
                  [ 252.08724847,  393.35239723, 1033.81024003]])),
        #Calculate for a range of frames
        ({'start': 2, 'end': 4}, 2,
        np.array([-0.30389522, -6.12213066,  7.55373785]),
        np.array([[ 251.62969971,  391.89085388, 1032.89422607],
                  [ 251.76171462,  392.8765222 , 1032.78920216],
                  [ 250.63846601,  392.02156018, 1032.87494881],
                  [ 251.62442601,  391.99750201, 1033.88850891]]))
    ])
    def test_calcAngles_angles_and_axis(self, kargs, expected_len_result, expected_first_angle, expected_first_axis):
        """
        This function tests pycgmCalc.calcAngles(data, **kargs),
        where data is the motion capture data to calculate angles for,
        and **kargs contains many options for how to return the calculated
        data.
    
        The 'vsk' argument in **kargs is required and used in all tests.
    
        The previously loaded motion_data in setup_class() is used
        for testing.
    
        This function only tests the usage of key word arguments to
        customize the layout format, not the accuracy of the results.
    
        We test the usage of calcAngles() to return both angles and
        axis.
        """
        kargs['vsk'] = self.cal_SM
        angles, axis = pycgmCalc.calcAngles(self.motion_data, **kargs)
        np.testing.assert_equal(len(angles), expected_len_result)
        np.testing.assert_equal(len(axis), expected_len_result)
>       np.testing.assert_almost_equal(angles[0][0], expected_first_angle, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 0.0006227
E       Max relative difference: 0.00112822
E        x: array([-0.30423808, -6.12275336,  7.55385362])
E        y: array([-0.30389522, -6.12213066,  7.55373785])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:71: AssertionError
_ TestPycgmCalc.test_calcAngles_angles_or_axis[kargs0-57-expected_truncated_results0] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717B378E0>
kargs = {'axis': False, 'formatData': False, 'frame': 0, 'vsk': {'Bodymass': 75.0, 'GCS': [[1, 0, 0], [0, 1, 0], [0, 0, 1]], 'HeadOffset': 0.25719903208740524, 'InterAsisDistance': 215.908996582031, ...}}
expected_len_result = 57
expected_truncated_results = array([[-0.30849491],
       [-6.12129279],
       [ 7.5714311 ],
       [ 2.91422293],
       [-6.86706898]])

    @pytest.mark.parametrize("kargs, expected_len_result, expected_truncated_results", [
        #Return angles only
        ({'frame': 0, 'formatData': False, 'axis': False}, 57,
         np.array([[-0.30849491],
                   [-6.12129279],
                   [ 7.5714311 ],
                   [ 2.91422293],
                   [-6.86706898]])),
        #Return axis only
        ({'frame': 0, 'formatData': False, 'angles': False}, 216,
         np.array([[ 251.60830688],
                   [ 391.74131775],
                   [1032.89349365],
                   [ 251.74063624],
                   [ 392.72694721]]))
    ])
    def test_calcAngles_angles_or_axis(self, kargs, expected_len_result, expected_truncated_results):
        """
        Test returning angles only or axis only through the
        keyword arguments in calcAngles(). Test the results are
        accurate by testing for the first 5 values in the returned
        arrays.
        """
        kargs['vsk'] = self.cal_SM
        result = pycgmCalc.calcAngles(self.motion_data, **kargs)
        np.testing.assert_equal(len(result), expected_len_result)
>       np.testing.assert_almost_equal(result[0:5], expected_truncated_results)
E       AssertionError: 
E       Arrays are not almost equal to 7 decimals
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 0.00134187
E       Max relative difference: 0.00045249
E        x: array([[-0.3086345],
E              [-6.1209948],
E              [ 7.5715178],...
E        y: array([[-0.3084949],
E              [-6.1212928],
E              [ 7.5714311],...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:100: AssertionError
_ TestPycgmCalc.test_calcAngles_angles_or_axis[kargs1-216-expected_truncated_results1] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717B57FD0>
kargs = {'angles': False, 'formatData': False, 'frame': 0, 'vsk': {'Bodymass': 75.0, 'GCS': [[1, 0, 0], [0, 1, 0], [0, 0, 1]], 'HeadOffset': 0.25719903208740524, 'InterAsisDistance': 215.908996582031, ...}}
expected_len_result = 216
expected_truncated_results = array([[ 251.60830688],
       [ 391.74131775],
       [1032.89349365],
       [ 251.74063624],
       [ 392.72694721]])

    @pytest.mark.parametrize("kargs, expected_len_result, expected_truncated_results", [
        #Return angles only
        ({'frame': 0, 'formatData': False, 'axis': False}, 57,
         np.array([[-0.30849491],
                   [-6.12129279],
                   [ 7.5714311 ],
                   [ 2.91422293],
                   [-6.86706898]])),
        #Return axis only
        ({'frame': 0, 'formatData': False, 'angles': False}, 216,
         np.array([[ 251.60830688],
                   [ 391.74131775],
                   [1032.89349365],
                   [ 251.74063624],
                   [ 392.72694721]]))
    ])
    def test_calcAngles_angles_or_axis(self, kargs, expected_len_result, expected_truncated_results):
        """
        Test returning angles only or axis only through the
        keyword arguments in calcAngles(). Test the results are
        accurate by testing for the first 5 values in the returned
        arrays.
        """
        kargs['vsk'] = self.cal_SM
        result = pycgmCalc.calcAngles(self.motion_data, **kargs)
        np.testing.assert_equal(len(result), expected_len_result)
>       np.testing.assert_almost_equal(result[0:5], expected_truncated_results)
E       AssertionError: 
E       Arrays are not almost equal to 7 decimals
E       
E       Mismatched elements: 4 / 5 (80%)
E       Max absolute difference: 6.10375e-05
E       Max relative difference: 5.90937017e-08
E        x: array([[ 251.6083069],
E              [ 391.741333 ],
E              [1032.8935547],...
E        y: array([[ 251.6083069],
E              [ 391.7413178],
E              [1032.8934936],...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:100: AssertionError
_________________ TestPycgmCalc.test_calcAngles_joint_centers _________________

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717AE45B0>

    def test_calcAngles_joint_centers(self):
        """
        Test returning joint_centers through calcAngles().
        """
        _,joint_centers = pycgmCalc.calcAngles(self.motion_data, vsk=self.cal_SM, frame=0,\
                                               formatData=False, splitAnglesAxis=False, returnjoints=True)
        #Verify that several the expected joint_centers are returned.
        expected_Front_Head = np.array([ 255.19071198,  406.12081909, 1721.92053223])
        expected_LHip = np.array([182.57097863, 339.43231855, 935.52900126])
        expected_RHand = np.array([ 859.80614366,  517.28239823, 1051.97278944])
        expected_Thorax = np.array([256.149810236564, 364.3090603933987, 1459.6553639290375])
        expected_LKnee = np.array([143.55478579, 279.90370346, 524.78408753])
        expected_result = [expected_Front_Head, expected_LHip, expected_RHand, expected_Thorax, expected_LKnee]
        result = [
            joint_centers[0]['Front_Head'],
            joint_centers[0]['LHip'],
            joint_centers[0]['RHand'],
            joint_centers[0]['Thorax'],
            joint_centers[0]['LKnee']
        ]
>       np.testing.assert_almost_equal(result, expected_result, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 10 / 15 (66.7%)
E       Max absolute difference: 0.00078692
E       Max relative difference: 2.31833773e-06
E        x: array([[ 255.19070435,  406.12081909, 1721.92053223],
E              [ 182.57119751,  339.43310547,  935.52923584],
E              [ 859.80614366,  517.28239823, 1051.97278944],...
E        y: array([[ 255.19071198,  406.12081909, 1721.92053223],
E              [ 182.57097863,  339.43231855,  935.52900126],
E              [ 859.80614366,  517.28239823, 1051.97278944],...

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:122: AssertionError
_ TestPycgmCalc.test_Calc_accuracy[0-10-10-expected_first_angles0-expected_LHumerus0] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717AF1DF0>, start = 0
end = 10, expected_len_result = 10
expected_first_angles = array([-0.30849491, -6.12129279,  7.5714311 ,  2.91422293, -6.86706898])
expected_LHumerus = array([-129.16952218,  316.8671644 , 1258.06440717])

    @pytest.mark.parametrize("start, end, expected_len_result, expected_first_angles, expected_LHumerus", [
        (0, 10, 10,
        np.array([-0.30849491, -6.12129279,  7.5714311 ,  2.91422293, -6.86706898]),
        np.array([-129.16952218,  316.8671644 , 1258.06440717])),
        (1, 2, 1,
        np.array([-0.30611243, -6.12165307,  7.5624917 ,  2.91095144, -6.86847416]),
        np.array([-129.1399663 ,  316.89254513, 1258.06483031])),
    ])
    def test_Calc_accuracy(self, start, end, expected_len_result, expected_first_angles, expected_LHumerus):
        """
        This function tests pycgmCalc.Calc(start, end, data, vsk), where
        start is the start frame index to begin the calculation, end is
        the end frame index to end the calculation, data is the motion
        capture data to calculate angles for and vsk is dictionary containing
        subject measurement values.
    
        The previously loaded motion_data and vsk_data in setup_class() is used
        for testing.
    
        This function only tests the usage of start and end to change the range
        of the calcuation. We test that Calc is accurate by testing for the
        first 5 angles and a joint center.
        """
        angles, jcs = pycgmCalc.Calc(start, end, self.motion_data, self.cal_SM)
        np.testing.assert_equal(len(angles), expected_len_result)
        np.testing.assert_equal(len(jcs), expected_len_result)
>       np.testing.assert_almost_equal(angles[0][:5], expected_first_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 0.00134187
E       Max relative difference: 0.00045249
E        x: array([-0.3086345 , -6.12099481,  7.57151779,  2.91351586, -6.86572711])
E        y: array([-0.30849491, -6.12129279,  7.5714311 ,  2.91422293, -6.86706898])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:170: AssertionError
_ TestPycgmCalc.test_Calc_accuracy[1-2-1-expected_first_angles1-expected_LHumerus1] _

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717BD0CA0>, start = 1
end = 2, expected_len_result = 1
expected_first_angles = array([-0.30611243, -6.12165307,  7.5624917 ,  2.91095144, -6.86847416])
expected_LHumerus = array([-129.1399663 ,  316.89254513, 1258.06483031])

    @pytest.mark.parametrize("start, end, expected_len_result, expected_first_angles, expected_LHumerus", [
        (0, 10, 10,
        np.array([-0.30849491, -6.12129279,  7.5714311 ,  2.91422293, -6.86706898]),
        np.array([-129.16952218,  316.8671644 , 1258.06440717])),
        (1, 2, 1,
        np.array([-0.30611243, -6.12165307,  7.5624917 ,  2.91095144, -6.86847416]),
        np.array([-129.1399663 ,  316.89254513, 1258.06483031])),
    ])
    def test_Calc_accuracy(self, start, end, expected_len_result, expected_first_angles, expected_LHumerus):
        """
        This function tests pycgmCalc.Calc(start, end, data, vsk), where
        start is the start frame index to begin the calculation, end is
        the end frame index to end the calculation, data is the motion
        capture data to calculate angles for and vsk is dictionary containing
        subject measurement values.
    
        The previously loaded motion_data and vsk_data in setup_class() is used
        for testing.
    
        This function only tests the usage of start and end to change the range
        of the calcuation. We test that Calc is accurate by testing for the
        first 5 angles and a joint center.
        """
        angles, jcs = pycgmCalc.Calc(start, end, self.motion_data, self.cal_SM)
        np.testing.assert_equal(len(angles), expected_len_result)
        np.testing.assert_equal(len(jcs), expected_len_result)
>       np.testing.assert_almost_equal(angles[0][:5], expected_first_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 0.0025828
E       Max relative difference: 0.00054143
E        x: array([-0.30599665, -6.12099481,  7.56257003,  2.90937538, -6.87105696])
E        y: array([-0.30611243, -6.12165307,  7.5624917 ,  2.91095144, -6.86847416])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:170: AssertionError
________________________ TestPycgmCalc.test_calcFrames ________________________

self = <test_pycgmCalc.TestPycgmCalc object at 0x0000023717B8B160>

    def test_calcFrames(self):
        """
        This function tests pycgmCalc.calcFrames(data, vsk), where
        data is an array of dictionaries containing motion capture data, and vsk
        is a dictionary containing subject measurement values.
    
        We test the accuracy of calcFrames by testing for the first
        five returned angles and several returned subject measurement
        values.
        """
        angles, joint_centers = pycgmCalc.calcFrames(self.motion_data[0:1], self.cal_SM)
    
        expected_angles = np.array([-0.30849491,-6.12129279,7.5714311,2.91422293,-6.86706898])
        result_angles = angles[0][:5]
    
        expected_Front_Head = np.array([ 255.19071198,  406.12081909, 1721.92053223])
        expected_LHip = np.array([182.57097863, 339.43231855, 935.52900126])
        expected_RHand = np.array([ 859.80614366,  517.28239823, 1051.97278944])
        expected_Thorax = np.array([256.149810236564, 364.3090603933987, 1459.6553639290375])
        expected_LKnee = np.array([143.55478579, 279.90370346, 524.78408753])
        expected_joints = [expected_Front_Head, expected_LHip, expected_RHand, expected_Thorax, expected_LKnee]
    
        result_joints = [
            joint_centers[0]['Front_Head'],
            joint_centers[0]['LHip'],
            joint_centers[0]['RHand'],
            joint_centers[0]['Thorax'],
            joint_centers[0]['LKnee']
        ]
    
>       np.testing.assert_almost_equal(result_angles, expected_angles, self.rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 8 decimals
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 0.00134187
E       Max relative difference: 0.00045249
E        x: array([-0.3086345 , -6.12099481,  7.57151779,  2.91351586, -6.86572711])
E        y: array([-0.30849491, -6.12129279,  7.5714311 ,  2.91422293, -6.86706898])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmCalc.py:216: AssertionError
_________ TestPycgmIO.test_writeResult[kwargs0-274-truncated_result0] _________

self = <test_pycgmIO.TestPycgmIO object at 0x0000023718CCC940>, kwargs = {}
len_written = 274
truncated_result = [0, -0.308494914509454, -6.121292793370006, 7.571431102151712, 2.914222929716658, -6.86706898044634, ...]

    @pytest.mark.parametrize("kwargs, len_written, truncated_result", [
        ({}, 274,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': False}, 217,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          251.740636241118779,392.726947206848479,1032.788500732036255]),
        ({'axis': False}, 58,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': ['R Hip', 'Head'],'axis': False}, 7,
         [0, 2.914222929716658,-6.867068980446340,-18.821000709643130,
          0.021196729275744,5.462252836649474,-91.496085343964339]),
        ({'axis': ['PELO', 'L RADZ'], 'angles': False}, 7,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          -271.942564463838380,485.192166623350204,1091.967911874857009]),
        ({'axis': ['NonExistentKey'], 'angles': False}, 1, [0])
    ])
    def test_writeResult(self, kwargs, len_written, truncated_result):
        """
        This function tests pycgmIO.writeResult(data, filename, **kwargs),
        where data is the pcygm output data to write, filename is the filename
        to write to, and **kwargs is a dictionary of keyword arguments
        specifying writing options.
    
        We test for a truncated output, and the number of output values written.
        We test writing all angles and axes, only angles, only axis,
        a list of angles, a list of axis, and non-existent keys.
    
        This function uses the previously computed kinematics data
        in setup_method, and writes to a temporary directory for testing.
        """
        data = self.kinematics
        output_filename = os.path.join(self.tmp_dir_name, 'output')
        pycgmIO.writeResult(data, output_filename, **kwargs)
        with open(output_filename + '.csv', 'r') as f:
            lines = f.readlines()
            #Skip the first 6 lines of output since they are headers
            result = lines[7].strip().split(',')
            array_result = np.asarray(result, dtype=np.float64)
            len_result = len(array_result)
            #Test that the truncated results are equal
>           np.testing.assert_equal(truncated_result, array_result[:7])
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 6 / 7 (85.7%)
E           Max absolute difference: 0.00134187
E           Max relative difference: 0.00045227
E            x: array([  0.      ,  -0.308495,  -6.121293,   7.571431,   2.914223,
E                   -6.867069, -18.821001])
E            y: array([  0.      ,  -0.308635,  -6.120995,   7.571518,   2.913516,
E                   -6.865727, -18.821246])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmIO.py:525: AssertionError
_________ TestPycgmIO.test_writeResult[kwargs1-217-truncated_result1] _________

self = <test_pycgmIO.TestPycgmIO object at 0x0000023718CC4550>
kwargs = {'angles': False}, len_written = 217
truncated_result = [0, 251.60830688476562, 391.74131774902344, 1032.8934936523438, 251.74063624111878, 392.7269472068485, ...]

    @pytest.mark.parametrize("kwargs, len_written, truncated_result", [
        ({}, 274,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': False}, 217,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          251.740636241118779,392.726947206848479,1032.788500732036255]),
        ({'axis': False}, 58,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': ['R Hip', 'Head'],'axis': False}, 7,
         [0, 2.914222929716658,-6.867068980446340,-18.821000709643130,
          0.021196729275744,5.462252836649474,-91.496085343964339]),
        ({'axis': ['PELO', 'L RADZ'], 'angles': False}, 7,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          -271.942564463838380,485.192166623350204,1091.967911874857009]),
        ({'axis': ['NonExistentKey'], 'angles': False}, 1, [0])
    ])
    def test_writeResult(self, kwargs, len_written, truncated_result):
        """
        This function tests pycgmIO.writeResult(data, filename, **kwargs),
        where data is the pcygm output data to write, filename is the filename
        to write to, and **kwargs is a dictionary of keyword arguments
        specifying writing options.
    
        We test for a truncated output, and the number of output values written.
        We test writing all angles and axes, only angles, only axis,
        a list of angles, a list of axis, and non-existent keys.
    
        This function uses the previously computed kinematics data
        in setup_method, and writes to a temporary directory for testing.
        """
        data = self.kinematics
        output_filename = os.path.join(self.tmp_dir_name, 'output')
        pycgmIO.writeResult(data, output_filename, **kwargs)
        with open(output_filename + '.csv', 'r') as f:
            lines = f.readlines()
            #Skip the first 6 lines of output since they are headers
            result = lines[7].strip().split(',')
            array_result = np.asarray(result, dtype=np.float64)
            len_result = len(array_result)
            #Test that the truncated results are equal
>           np.testing.assert_equal(truncated_result, array_result[:7])
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 5 / 7 (71.4%)
E           Max absolute difference: 7.34867137e-05
E           Max relative difference: 7.11536858e-08
E            x: array([   0.      ,  251.608307,  391.741318, 1032.893494,  251.740636,
E                   392.726947, 1032.788501])
E            y: array([   0.      ,  251.608307,  391.741333, 1032.893555,  251.740631,
E                   392.726959, 1032.788574])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmIO.py:525: AssertionError
---------------------------- Captured stdout call -----------------------------
(1, 273)
(1, 216)
[]
[]
_________ TestPycgmIO.test_writeResult[kwargs2-58-truncated_result2] __________

self = <test_pycgmIO.TestPycgmIO object at 0x0000023718858550>
kwargs = {'axis': False}, len_written = 58
truncated_result = [0, -0.308494914509454, -6.121292793370006, 7.571431102151712, 2.914222929716658, -6.86706898044634, ...]

    @pytest.mark.parametrize("kwargs, len_written, truncated_result", [
        ({}, 274,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': False}, 217,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          251.740636241118779,392.726947206848479,1032.788500732036255]),
        ({'axis': False}, 58,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': ['R Hip', 'Head'],'axis': False}, 7,
         [0, 2.914222929716658,-6.867068980446340,-18.821000709643130,
          0.021196729275744,5.462252836649474,-91.496085343964339]),
        ({'axis': ['PELO', 'L RADZ'], 'angles': False}, 7,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          -271.942564463838380,485.192166623350204,1091.967911874857009]),
        ({'axis': ['NonExistentKey'], 'angles': False}, 1, [0])
    ])
    def test_writeResult(self, kwargs, len_written, truncated_result):
        """
        This function tests pycgmIO.writeResult(data, filename, **kwargs),
        where data is the pcygm output data to write, filename is the filename
        to write to, and **kwargs is a dictionary of keyword arguments
        specifying writing options.
    
        We test for a truncated output, and the number of output values written.
        We test writing all angles and axes, only angles, only axis,
        a list of angles, a list of axis, and non-existent keys.
    
        This function uses the previously computed kinematics data
        in setup_method, and writes to a temporary directory for testing.
        """
        data = self.kinematics
        output_filename = os.path.join(self.tmp_dir_name, 'output')
        pycgmIO.writeResult(data, output_filename, **kwargs)
        with open(output_filename + '.csv', 'r') as f:
            lines = f.readlines()
            #Skip the first 6 lines of output since they are headers
            result = lines[7].strip().split(',')
            array_result = np.asarray(result, dtype=np.float64)
            len_result = len(array_result)
            #Test that the truncated results are equal
>           np.testing.assert_equal(truncated_result, array_result[:7])
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 6 / 7 (85.7%)
E           Max absolute difference: 0.00134187
E           Max relative difference: 0.00045227
E            x: array([  0.      ,  -0.308495,  -6.121293,   7.571431,   2.914223,
E                   -6.867069, -18.821001])
E            y: array([  0.      ,  -0.308635,  -6.120995,   7.571518,   2.913516,
E                   -6.865727, -18.821246])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmIO.py:525: AssertionError
__________ TestPycgmIO.test_writeResult[kwargs3-7-truncated_result3] __________

self = <test_pycgmIO.TestPycgmIO object at 0x00000237187B0490>
kwargs = {'angles': ['R Hip', 'Head'], 'axis': False}, len_written = 7
truncated_result = [0, 2.914222929716658, -6.86706898044634, -18.82100070964313, 0.021196729275744, 5.462252836649474, ...]

    @pytest.mark.parametrize("kwargs, len_written, truncated_result", [
        ({}, 274,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': False}, 217,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          251.740636241118779,392.726947206848479,1032.788500732036255]),
        ({'axis': False}, 58,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': ['R Hip', 'Head'],'axis': False}, 7,
         [0, 2.914222929716658,-6.867068980446340,-18.821000709643130,
          0.021196729275744,5.462252836649474,-91.496085343964339]),
        ({'axis': ['PELO', 'L RADZ'], 'angles': False}, 7,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          -271.942564463838380,485.192166623350204,1091.967911874857009]),
        ({'axis': ['NonExistentKey'], 'angles': False}, 1, [0])
    ])
    def test_writeResult(self, kwargs, len_written, truncated_result):
        """
        This function tests pycgmIO.writeResult(data, filename, **kwargs),
        where data is the pcygm output data to write, filename is the filename
        to write to, and **kwargs is a dictionary of keyword arguments
        specifying writing options.
    
        We test for a truncated output, and the number of output values written.
        We test writing all angles and axes, only angles, only axis,
        a list of angles, a list of axis, and non-existent keys.
    
        This function uses the previously computed kinematics data
        in setup_method, and writes to a temporary directory for testing.
        """
        data = self.kinematics
        output_filename = os.path.join(self.tmp_dir_name, 'output')
        pycgmIO.writeResult(data, output_filename, **kwargs)
        with open(output_filename + '.csv', 'r') as f:
            lines = f.readlines()
            #Skip the first 6 lines of output since they are headers
            result = lines[7].strip().split(',')
            array_result = np.asarray(result, dtype=np.float64)
            len_result = len(array_result)
            #Test that the truncated results are equal
>           np.testing.assert_equal(truncated_result, array_result[:7])
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 6 / 7 (85.7%)
E           Max absolute difference: 0.00134187
E           Max relative difference: 0.00024268
E            x: array([ 0.000000e+00,  2.914223e+00, -6.867069e+00, -1.882100e+01,
E                   2.119673e-02,  5.462253e+00, -9.149609e+01])
E            y: array([ 0.000000e+00,  2.913516e+00, -6.865727e+00, -1.882125e+01,
E                   2.119691e-02,  5.462252e+00, -9.149608e+01])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmIO.py:525: AssertionError
__________ TestPycgmIO.test_writeResult[kwargs4-7-truncated_result4] __________

self = <test_pycgmIO.TestPycgmIO object at 0x0000023718858BE0>
kwargs = {'angles': False, 'axis': ['PELO', 'L RADZ']}, len_written = 7
truncated_result = [0, 251.60830688476562, 391.74131774902344, 1032.8934936523438, -271.9425644638384, 485.1921666233502, ...]

    @pytest.mark.parametrize("kwargs, len_written, truncated_result", [
        ({}, 274,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': False}, 217,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          251.740636241118779,392.726947206848479,1032.788500732036255]),
        ({'axis': False}, 58,
         [0, -0.308494914509454,-6.121292793370006,7.571431102151712,
          2.914222929716658,-6.867068980446340,-18.821000709643130]),
        ({'angles': ['R Hip', 'Head'],'axis': False}, 7,
         [0, 2.914222929716658,-6.867068980446340,-18.821000709643130,
          0.021196729275744,5.462252836649474,-91.496085343964339]),
        ({'axis': ['PELO', 'L RADZ'], 'angles': False}, 7,
         [0, 251.608306884765625,391.741317749023438,1032.893493652343750,
          -271.942564463838380,485.192166623350204,1091.967911874857009]),
        ({'axis': ['NonExistentKey'], 'angles': False}, 1, [0])
    ])
    def test_writeResult(self, kwargs, len_written, truncated_result):
        """
        This function tests pycgmIO.writeResult(data, filename, **kwargs),
        where data is the pcygm output data to write, filename is the filename
        to write to, and **kwargs is a dictionary of keyword arguments
        specifying writing options.
    
        We test for a truncated output, and the number of output values written.
        We test writing all angles and axes, only angles, only axis,
        a list of angles, a list of axis, and non-existent keys.
    
        This function uses the previously computed kinematics data
        in setup_method, and writes to a temporary directory for testing.
        """
        data = self.kinematics
        output_filename = os.path.join(self.tmp_dir_name, 'output')
        pycgmIO.writeResult(data, output_filename, **kwargs)
        with open(output_filename + '.csv', 'r') as f:
            lines = f.readlines()
            #Skip the first 6 lines of output since they are headers
            result = lines[7].strip().split(',')
            array_result = np.asarray(result, dtype=np.float64)
            len_result = len(array_result)
            #Test that the truncated results are equal
>           np.testing.assert_equal(truncated_result, array_result[:7])
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 5 / 7 (71.4%)
E           Max absolute difference: 6.10351562e-05
E           Max relative difference: 6.78971967e-08
E            x: array([   0.      ,  251.608307,  391.741318, 1032.893494, -271.942564,
E                   485.192167, 1091.967912])
E            y: array([   0.      ,  251.608307,  391.741333, 1032.893555, -271.942546,
E                   485.192178, 1091.967854])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmIO.py:525: AssertionError
---------------------------- Captured stdout call -----------------------------
(1, 273)
(1, 216)
[ 60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77
  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113
 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149
 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167
 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185
 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203
 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221
 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239
 240 241 242 243 244 245 249 250 251 252 253 254 255 256 257 258 259 260
 261 262 263 264 265 266 267 268 269 270 271 272]
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215]
_____________________ Test_pycgmKinetics.test_getKinetics _____________________

self = <test_pycgmKinetics.Test_pycgmKinetics testMethod=test_getKinetics>

    def test_getKinetics(self):
        """
        This test provides coverage of the getKinetics function in pycgmKinetics.py,
        defined as getKinetics(data, Bodymass), where data is an array of joint centers
        and Bodymass is a float or int.
    
        This test uses helper functions to obtain the data variable (aka joint_centers).
    
        Each index in accuracyTests is used as parameters for the function getKinetics
        and the result is then checked to be equal with the same index in
        accuracyResults using 8 decimal point precision comparison.
        """
        # Testing is done by using 5 different bodymasses and the same joint_center obtained from the helper functions.
        from pyCGM_Single.pyCGM_Helpers import getfilenames
        from pyCGM_Single.pycgmIO import loadData, loadVSK
        from pyCGM_Single.pycgmStatic import getStatic
        from pyCGM_Single.pycgmCalc import calcAngles
    
        cwd = os.getcwd() + os.sep
        # Data is obtained from the sample files.
        dynamic_trial,static_trial,vsk_file,_,_ = getfilenames(2)
        motionData  = loadData(cwd+dynamic_trial)
        staticData = loadData(cwd+static_trial)
        vsk = loadVSK(cwd+vsk_file,dict=False)
    
        calSM = getStatic(staticData,vsk,flat_foot=False)
        _,joint_centers=calcAngles(motionData,start=None,end=None,vsk=calSM, splitAnglesAxis=False,formatData=False,returnjoints=True)
    
        accuracyTests=[]
        calSM['Bodymass']=5.0
        # This creates five individual assertions to check, all with the same joint_centers but different bodymasses.
        for i in range(5):
            accuracyTests.append((joint_centers,calSM['Bodymass']))
            calSM['Bodymass']+=35.75 #Increment the bodymass by a substantial amount each time.
    
        accuracyResults=[
            ([ 246.57466721,  313.55662383, 1026.56323492]),
            ([ 246.59137623,  313.6216639 , 1026.56440096]),
            ([ 246.60850798,  313.6856272 , 1026.56531282]),
            ([ 246.6260863 ,  313.74845693, 1026.56594554]),
            ([ 246.64410308,  313.81017167, 1026.5663452 ]),
        ]
        for i in range(len(accuracyResults)):
            # Call getKinetics(joint_centers,bodymass) and round each variable in the 3-element returned list to the 8th decimal precision.
            result = [np.around(arr,rounding_precision) for arr in pycgmKinetics.getKinetics(accuracyTests[i][0],accuracyTests[i][1])]
    
            # Compare the result with the values in the expected results, within a rounding precision of 8.
>           np.testing.assert_almost_equal(result[i],accuracyResults[i], rounding_precision)
E           AssertionError: 
E           Arrays are not almost equal to 8 decimals
E           
E           Mismatched elements: 3 / 3 (100%)
E           Max absolute difference: 0.00093624
E           Max relative difference: 9.12013959e-07
E            x: array([ 246.57484942,  313.55686077, 1026.56417116])
E            y: array([ 246.57466721,  313.55662383, 1026.56323492])

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmKinetics.py:626: AssertionError
---------------------------- Captured stdout call -----------------------------
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData/ROM/Sample_Dynamic.c3d
a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\SampleData/ROM/Sample_Static.c3d
__________ TestPycgmStaticGetStatic.test_getStatic_InterAsisDistance __________

self = <test_pycgmStatic_utils.TestPycgmStaticGetStatic object at 0x0000023787BBA3D0>

    def test_getStatic_InterAsisDistance(self):
        """
        This function tests that when pycgmStatic.getStatic() is called with vsk_data['InterAsisDistance'] is 0, that
        the value for calSM['InterAsisDistance'] is calculated from motionData
        """
        self.vsk_data['InterAsisDistance'] = 0
        result = pycgmStatic.getStatic(self.motion_data, self.vsk_data)
>       np.testing.assert_almost_equal(result['InterAsisDistance'], 215.9094195515741, rounding_precision)
E       AssertionError: 
E       Arrays are not almost equal to 6 decimals
E        ACTUAL: 215.90942
E        DESIRED: 215.9094195515741

C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_pycgmStatic_utils.py:915: AssertionError
============================== warnings summary ===============================
C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:148
  C:\Users\David\projects\pyCGM\pyCGM_Single\tests\test_Pipelines.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
    (np.array([[0,1],[1,2],[2,3],[3],[4],[5],[6],[7],

pyCGM_Single/tests/test_Pipelines.py: 2 warnings
pyCGM_Single/tests/test_csvOutput.py: 8 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 2 warnings
pyCGM_Single/tests/test_pycgmIO.py: 14 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 2 warnings
pyCGM_Single/tests/test_pycgmStatic_utils.py: 1 warning
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\c3d.py:242: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    self.event_disp_flags = np.zeros(0, dtype=np.bool)

pyCGM_Single/tests/test_Pipelines.py: 2 warnings
pyCGM_Single/tests/test_csvOutput.py: 8 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 2 warnings
pyCGM_Single/tests/test_pycgmIO.py: 14 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 2 warnings
pyCGM_Single/tests/test_pycgmStatic_utils.py: 1 warning
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\c3d.py:383: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    self.event_disp_flags = np.zeros(read_count, dtype=np.bool)

pyCGM_Single/tests/test_Pipelines.py: 1 warning
pyCGM_Single/tests/test_csvOutput.py: 1 warning
pyCGM_Single/tests/test_pycgmIO.py: 12 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\c3d.py:888: UserWarning: No analog data found in file.
    warnings.warn('No analog data found in file.')

pyCGM_Single/tests/test_Pipelines.py: 70 warnings
pyCGM_Single/tests/test_clusterCalc.py: 5 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\clusterCalc.py:179: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    Tw_c =np.matrix([[x_hat[0],y_hat[0],z_hat[0],origin[0]],

pyCGM_Single/tests/test_Pipelines.py: 70 warnings
pyCGM_Single/tests/test_clusterCalc.py: 5 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\clusterCalc.py:185: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    Tw_m = np.matrix([[1,0,0,p[0]],

pyCGM_Single/tests/test_Pipelines.py: 134 warnings
pyCGM_Single/tests/test_clusterCalc.py: 10 warnings
pyCGM_Single/tests/test_csvOutput.py: 56788 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 1280 warnings
pyCGM_Single/tests/test_pycgmIO.py: 1110 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 39860 warnings
pyCGM_Single/tests/test_pycgmStatic_axis.py: 12 warnings
pyCGM_Single/tests/test_pycgmStatic_utils.py: 35200 warnings
pyCGM_Single/tests/test_pycgm_axis.py: 22 warnings
  a:\pycgm\env38\lib\site-packages\numpy-1.20.1-py3.8-win-amd64.egg\numpy\matrixlib\defmatrix.py:69: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    return matrix(data, dtype=dtype, copy=False)

pyCGM_Single/tests/test_Pipelines.py: 66 warnings
pyCGM_Single/tests/test_clusterCalc.py: 5 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\clusterCalc.py:110: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    Tw_c =np.matrix([[x_hat[0],y_hat[0],z_hat[0],origin[0]],

pyCGM_Single/tests/test_Pipelines.py: 66 warnings
pyCGM_Single/tests/test_clusterCalc.py: 5 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\clusterCalc.py:116: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    Tc_m = np.matrix([[1,0,0,Pm[0]],

pyCGM_Single/tests/test_csvOutput.py: 6568 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 1100 warnings
pyCGM_Single/tests/test_pycgmIO.py: 1100 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 1100 warnings
pyCGM_Single/tests/test_pycgmStatic_axis.py: 12 warnings
pyCGM_Single/tests/test_pycgmStatic_utils.py: 35200 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:2059: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    rot = np.matrix([[cs+ux**2.0*(1.0-cs),ux*uy*(1.0-cs)-uz*sn,ux*uz*(1.0-cs)+uy*sn],

pyCGM_Single/tests/test_csvOutput.py: 6568 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 1100 warnings
pyCGM_Single/tests/test_pycgmIO.py: 1100 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 1100 warnings
pyCGM_Single/tests/test_pycgmStatic_axis.py: 12 warnings
pyCGM_Single/tests/test_pycgmStatic_utils.py: 35200 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:2062: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    r = rot*(np.matrix(v2).transpose())

pyCGM_Single/tests/test_csvOutput.py: 50220 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 180 warnings
pyCGM_Single/tests/test_pycgmIO.py: 10 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 38760 warnings
pyCGM_Single/tests/test_pycgm_axis.py: 22 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:2043: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    rot = np.matrix([[cs+ux**2.0*(1.0-cs),ux*uy*(1.0-cs)-uz*sn,ux*uz*(1.0-cs)+uy*sn],

pyCGM_Single/tests/test_csvOutput.py: 50220 warnings
pyCGM_Single/tests/test_pycgmCalc.py: 180 warnings
pyCGM_Single/tests/test_pycgmIO.py: 10 warnings
pyCGM_Single/tests/test_pycgmKinetics.py: 38760 warnings
pyCGM_Single/tests/test_pycgm_axis.py: 22 warnings
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:2046: PendingDeprecationWarning: the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.
    r = rot*(np.matrix(v2).transpose())

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_staticCalculationHead[head1-nan]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_staticCalculationHead[head3-nan]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:420: RuntimeWarning: invalid value encountered in double_scalars
    getB= M[0][2] / M[2][2]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_staticCalculationHead[head2-1.5707963267948966]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_headoffCalc_datatypes
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:420: RuntimeWarning: divide by zero encountered in double_scalars
    getB= M[0][2] / M[2][2]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_pelvisJointCenter[frame1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_pelvisJointCenter[frame3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_pelvisJointCenter[frame4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_pelvisJointCenter[frame7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:645: RuntimeWarning: invalid value encountered in true_divide
    y_axis = beta2/norm3d(beta2)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:972: RuntimeWarning: invalid value encountered in true_divide
    R_knee_x_axis = R_knee_x_axis/norm3d(R_knee_x_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:974: RuntimeWarning: invalid value encountered in true_divide
    R_knee_y_axis = R_knee_y_axis/norm3d(R_knee_y_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:976: RuntimeWarning: invalid value encountered in true_divide
    R_knee_z_axis = R_knee_z_axis/norm3d(R_knee_z_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:978: RuntimeWarning: invalid value encountered in true_divide
    L_knee_x_axis = L_knee_x_axis/norm3d(L_knee_x_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:980: RuntimeWarning: invalid value encountered in true_divide
    L_knee_y_axis = L_knee_y_axis/norm3d(L_knee_y_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:982: RuntimeWarning: invalid value encountered in true_divide
    L_knee_z_axis = L_knee_z_axis/norm3d(L_knee_z_axis)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1129: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_x_axis = [R_ankle_x_axis[0]/R_ankle_x_axis_div,R_ankle_x_axis[1]/R_ankle_x_axis_div,R_ankle_x_axis[2]/R_ankle_x_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1133: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_y_axis = [R_ankle_y_axis[0]/R_ankle_y_axis_div,R_ankle_y_axis[1]/R_ankle_y_axis_div,R_ankle_y_axis[2]/R_ankle_y_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1137: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_z_axis = [R_ankle_z_axis[0]/R_ankle_z_axis_div,R_ankle_z_axis[1]/R_ankle_z_axis_div,R_ankle_z_axis[2]/R_ankle_z_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1141: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_x_axis = [L_ankle_x_axis[0]/L_ankle_x_axis_div,L_ankle_x_axis[1]/L_ankle_x_axis_div,L_ankle_x_axis[2]/L_ankle_x_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1145: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_y_axis = [L_ankle_y_axis[0]/L_ankle_y_axis_div,L_ankle_y_axis[1]/L_ankle_y_axis_div,L_ankle_y_axis[2]/L_ankle_y_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1149: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_z_axis = [L_ankle_z_axis[0]/L_ankle_z_axis_div,L_ankle_z_axis[1]/L_ankle_z_axis_div,L_ankle_z_axis[2]/L_ankle_z_axis_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame1-static_info1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame3-static_info3-ankle_JC3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1319: RuntimeWarning: invalid value encountered in true_divide
    R_axis_z = [R_axis_z[0]/R_axis_z_div,R_axis_z[1]/R_axis_z_div,R_axis_z[2]/R_axis_z_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame1-static_info1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame2-static_info2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame3-static_info3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame5-static_info5-ankle_JC5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1324: RuntimeWarning: invalid value encountered in true_divide
    y_flex_R = [y_flex_R[0]/y_flex_R_div,y_flex_R[1]/y_flex_R_div,y_flex_R[2]/y_flex_R_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame1-static_info1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame3-static_info3-ankle_JC3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1343: RuntimeWarning: invalid value encountered in true_divide
    L_axis_z = [L_axis_z[0]/L_axis_z_div,L_axis_z[1]/L_axis_z_div,L_axis_z[2]/L_axis_z_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame1-static_info1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame2-static_info2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame3-static_info3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_footJointCenter[frame5-static_info5-ankle_JC5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1348: RuntimeWarning: invalid value encountered in true_divide
    y_flex_L = [y_flex_L[0]/y_flex_L_div,y_flex_L[1]/y_flex_L_div,y_flex_L[2]/y_flex_L_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_headJC[frame2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1517: RuntimeWarning: invalid value encountered in double_scalars
    y_vec = [y_vec[0]/y_vec_div,y_vec[1]/y_vec_div,y_vec[2]/y_vec_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_headJC[frame3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1512: RuntimeWarning: invalid value encountered in double_scalars
    x_vec = [x_vec[0]/x_vec_div,x_vec[1]/x_vec_div,x_vec[2]/x_vec_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame6-ankle_JC6-expected6]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame7-ankle_JC7-expected7]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1611: RuntimeWarning: invalid value encountered in true_divide
    R_axis_z = [R_axis_z[0]/R_axis_z_div,R_axis_z[1]/R_axis_z_div,R_axis_z[2]/R_axis_z_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame4-ankle_JC4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame6-ankle_JC6-expected6]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame2-ankle_JC2-False-vsk2-expected_results2]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1616: RuntimeWarning: invalid value encountered in true_divide
    y_flex_R = [y_flex_R[0]/y_flex_R_div,y_flex_R[1]/y_flex_R_div,y_flex_R[2]/y_flex_R_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame5-ankle_JC5-expected5]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame7-ankle_JC7-expected7]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1640: RuntimeWarning: invalid value encountered in true_divide
    L_axis_z = [L_axis_z[0]/L_axis_z_div,L_axis_z[1]/L_axis_z_div,L_axis_z[2]/L_axis_z_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame4-ankle_JC4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame5-ankle_JC5-expected5]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame2-ankle_JC2-False-vsk2-expected_results2]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1645: RuntimeWarning: invalid value encountered in true_divide
    y_flex_L = [y_flex_L[0]/y_flex_L_div,y_flex_L[1]/y_flex_L_div,y_flex_L[2]/y_flex_L_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame5-ankle_JC5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1621: RuntimeWarning: invalid value encountered in double_scalars
    R_axis_x = [R_axis_x[0]/R_axis_x_div,R_axis_x[1]/R_axis_x_div,R_axis_x[2]/R_axis_x_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_uncorrect_footaxis[frame6-ankle_JC6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1650: RuntimeWarning: invalid value encountered in double_scalars
    L_axis_x = [L_axis_x[0]/L_axis_x_div,L_axis_x[1]/L_axis_x_div,L_axis_x[2]/L_axis_x_div]

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1753: RuntimeWarning: invalid value encountered in true_divide
    R_axis_z = R_axis_z/norm3d(R_axis_z)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame3-ankle_JC3-vsk3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame4-ankle_JC4-vsk4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame7-ankle_JC7-vsk7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1757: RuntimeWarning: invalid value encountered in true_divide
    hee2_toe = hee2_toe/norm3d(hee2_toe)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame2-ankle_JC2-vsk2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1767: RuntimeWarning: invalid value encountered in true_divide
    y_flex_R = y_flex_R/norm3d(y_flex_R)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1790: RuntimeWarning: invalid value encountered in true_divide
    L_axis_z = L_axis_z/norm3d(L_axis_z)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame3-ankle_JC3-vsk3-expected3]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame4-ankle_JC4-vsk4-expected4]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame7-ankle_JC7-vsk7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1794: RuntimeWarning: invalid value encountered in true_divide
    hee2_toe = hee2_toe/norm3d(hee2_toe)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame1-ankle_JC1-vsk1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_footflat[frame2-ankle_JC2-vsk2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1804: RuntimeWarning: invalid value encountered in true_divide
    y_flex_L = y_flex_L/norm3d(y_flex_L)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame3-ankle_JC3-False-vsk3-expected_results3]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1901: RuntimeWarning: invalid value encountered in true_divide
    R_axis_z = R_axis_z/norm3d(R_axis_z)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame5-ankle_JC5-expected5]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame2-ankle_JC2-False-vsk2-expected_results2]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1904: RuntimeWarning: invalid value encountered in true_divide
    y_flex_R = y_flex_R/norm3d(y_flex_R)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame3-ankle_JC3-False-vsk3-expected_results3]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1924: RuntimeWarning: invalid value encountered in true_divide
    L_axis_z = L_axis_z/norm3d(L_axis_z)

pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgmStatic_axis.py::TestPycgmStaticAxis::test_rotaxis_nonfootflat[frame4-ankle_JC4-expected4]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame1-ankle_JC1-False-vsk1-expected_results1]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame2-ankle_JC2-False-vsk2-expected_results2]
pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_staticCalculation[frame4-ankle_JC4-False-vsk4-expected_results4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1927: RuntimeWarning: invalid value encountered in true_divide
    y_flex_L = y_flex_L/norm3d(y_flex_L)

pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticUtils::test_getankleangle_datatypes
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pycgmStatic.py:1988: RuntimeWarning: divide by zero encountered in double_scalars
    getB = -1*M[2][0] / M[2][2]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_headJC[frame2-vsk2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1031: RuntimeWarning: invalid value encountered in double_scalars
    y_vec = [y_vec[0]/y_vec_div,y_vec[1]/y_vec_div,y_vec[2]/y_vec_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_headJC[frame3-vsk3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1026: RuntimeWarning: invalid value encountered in double_scalars
    x_vec = [x_vec[0]/x_vec_div,x_vec[1]/x_vec_div,x_vec[2]/x_vec_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_thoraxJC[frame2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1125: RuntimeWarning: invalid value encountered in true_divide
    z_vec = z_direc/norm3d(z_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_thoraxJC[frame3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1121: RuntimeWarning: invalid value encountered in true_divide
    C7_CLAV = C7_CLAV/norm3d(C7_CLAV)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_thoraxJC[frame3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1129: RuntimeWarning: invalid value encountered in true_divide
    x_vec = x_direc/norm3d(x_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax1-shoulderJC1-wand1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax3-shoulderJC3-wand3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1373: RuntimeWarning: invalid value encountered in true_divide
    R_wand_direc = R_wand_direc/norm3d(R_wand_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax1-shoulderJC1-wand1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax3-shoulderJC3-wand3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1374: RuntimeWarning: invalid value encountered in true_divide
    L_wand_direc = L_wand_direc/norm3d(L_wand_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax1-shoulderJC1-wand1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax4-shoulderJC4-wand4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1382: RuntimeWarning: invalid value encountered in true_divide
    z_direc = z_direc/norm3d(z_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax1-shoulderJC1-wand1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax4-shoulderJC4-wand4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1402: RuntimeWarning: invalid value encountered in true_divide
    z_direc = z_direc/norm3d(z_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax2-shoulderJC2-wand2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1385: RuntimeWarning: invalid value encountered in true_divide
    x_direc = x_direc/norm3d(x_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_shoulderAxisCalc[thorax2-shoulderJC2-wand2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1405: RuntimeWarning: invalid value encountered in true_divide
    x_direc = x_direc/norm3d(x_direc)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1525: RuntimeWarning: invalid value encountered in double_scalars
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1530: RuntimeWarning: invalid value encountered in double_scalars
    x_axis = [x_axis[0]/x_axis_div,x_axis[1]/x_axis_div,x_axis[2]/x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1545: RuntimeWarning: invalid value encountered in double_scalars
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1550: RuntimeWarning: invalid value encountered in double_scalars
    x_axis = [x_axis[0]/x_axis_div,x_axis[1]/x_axis_div,x_axis[2]/x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1568: RuntimeWarning: invalid value encountered in true_divide
    R_con_1 = [R_con_1[0]/R_con_1_div,R_con_1[1]/R_con_1_div,R_con_1[2]/R_con_1_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1572: RuntimeWarning: invalid value encountered in double_scalars
    R_con_2 = [R_con_2[0]/R_con_2_div,R_con_2[1]/R_con_2_div,R_con_2[2]/R_con_2_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1582: RuntimeWarning: invalid value encountered in true_divide
    L_con_1 = [L_con_1[0]/L_con_1_div,L_con_1[1]/L_con_1_div,L_con_1[2]/L_con_1_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1586: RuntimeWarning: invalid value encountered in double_scalars
    L_con_2 = [L_con_2[0]/L_con_2_div,L_con_2[1]/L_con_2_div,L_con_2[2]/L_con_2_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1604: RuntimeWarning: invalid value encountered in true_divide
    x_axis = [x_axis[0]/x_axis_div,x_axis[1]/x_axis_div,x_axis[2]/x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1608: RuntimeWarning: invalid value encountered in double_scalars
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame6-thorax6-shoulderJC6-vsk6-mockReturnVal6-expectedMockArgs6-expected6]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1623: RuntimeWarning: invalid value encountered in true_divide
    x_axis = [x_axis[0]/x_axis_div,x_axis[1]/x_axis_div,x_axis[2]/x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame4-thorax4-shoulderJC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1627: RuntimeWarning: invalid value encountered in double_scalars
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame2-thorax2-shoulderJC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame7-thorax7-shoulderJC7-vsk7-mockReturnVal7-expectedMockArgs7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1654: RuntimeWarning: invalid value encountered in true_divide
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame1-thorax1-shoulderJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame2-thorax2-shoulderJC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame5-thorax5-shoulderJC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame7-thorax7-shoulderJC7-vsk7-mockReturnVal7-expectedMockArgs7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1679: RuntimeWarning: invalid value encountered in true_divide
    z_axis = [z_axis[0]/z_axis_div,z_axis[1]/z_axis_div,z_axis[2]/z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_elbowJointCenter[frame3-thorax3-shoulderJC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1554: RuntimeWarning: invalid value encountered in double_scalars
    y_axis = [y_axis[0]/y_axis_div,y_axis[1]/y_axis_div,y_axis[2]/y_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1791: RuntimeWarning: invalid value encountered in true_divide
    y_axis = y_axis/ norm3d(y_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1794: RuntimeWarning: invalid value encountered in true_divide
    z_axis = z_axis/ norm3d(z_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1812: RuntimeWarning: invalid value encountered in true_divide
    y_axis = y_axis/ norm3d(y_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC3-expected3]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1815: RuntimeWarning: invalid value encountered in true_divide
    z_axis = z_axis/ norm3d(z_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1797: RuntimeWarning: invalid value encountered in true_divide
    x_axis = x_axis/ norm3d(x_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::testWristJointCenter[elbowJC2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1818: RuntimeWarning: invalid value encountered in true_divide
    x_axis = x_axis/ norm3d(x_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_handJointCenter[frame1-wristJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_handJointCenter[frame2-wristJC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1937: RuntimeWarning: invalid value encountered in double_scalars
    y_axis = [y_axis[0]/y_axis_div,y_axis[1]/y_axis_div,y_axis[2]/y_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_handJointCenter[frame1-wristJC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestUpperBodyAxis::test_handJointCenter[frame2-wristJC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:1956: RuntimeWarning: invalid value encountered in double_scalars
    y_axis = [y_axis[0]/y_axis_div,y_axis[1]/y_axis_div,y_axis[2]/y_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_pelvisJointCenter[frame1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_pelvisJointCenter[frame3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_pelvisJointCenter[frame4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_pelvisJointCenter[frame7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:126: RuntimeWarning: invalid value encountered in true_divide
    y_axis = beta2/norm3d(beta2)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:483: RuntimeWarning: invalid value encountered in true_divide
    R_knee_x_axis = R_knee_x_axis/norm3d(R_knee_x_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:485: RuntimeWarning: invalid value encountered in true_divide
    R_knee_y_axis = R_knee_y_axis/norm3d(R_knee_y_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:487: RuntimeWarning: invalid value encountered in true_divide
    R_knee_z_axis = R_knee_z_axis/norm3d(R_knee_z_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:489: RuntimeWarning: invalid value encountered in true_divide
    L_knee_x_axis = L_knee_x_axis/norm3d(L_knee_x_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame3-hip_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame5-hip_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:491: RuntimeWarning: invalid value encountered in true_divide
    L_knee_y_axis = L_knee_y_axis/norm3d(L_knee_y_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame1-hip_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame2-hip_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_kneeJointCenter[frame4-hip_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:493: RuntimeWarning: invalid value encountered in true_divide
    L_knee_z_axis = L_knee_z_axis/norm3d(L_knee_z_axis)

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:645: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_x_axis = [R_ankle_x_axis[0]/R_ankle_x_axis_div,R_ankle_x_axis[1]/R_ankle_x_axis_div,R_ankle_x_axis[2]/R_ankle_x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:649: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_y_axis = [R_ankle_y_axis[0]/R_ankle_y_axis_div,R_ankle_y_axis[1]/R_ankle_y_axis_div,R_ankle_y_axis[2]/R_ankle_y_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:653: RuntimeWarning: invalid value encountered in true_divide
    R_ankle_z_axis = [R_ankle_z_axis[0]/R_ankle_z_axis_div,R_ankle_z_axis[1]/R_ankle_z_axis_div,R_ankle_z_axis[2]/R_ankle_z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:657: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_x_axis = [L_ankle_x_axis[0]/L_ankle_x_axis_div,L_ankle_x_axis[1]/L_ankle_x_axis_div,L_ankle_x_axis[2]/L_ankle_x_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame3-knee_JC3-vsk3-mockReturnVal3-expectedMockArgs3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame5-knee_JC5-vsk5-mockReturnVal5-expectedMockArgs5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:661: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_y_axis = [L_ankle_y_axis[0]/L_ankle_y_axis_div,L_ankle_y_axis[1]/L_ankle_y_axis_div,L_ankle_y_axis[2]/L_ankle_y_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame1-knee_JC1-vsk1-mockReturnVal1-expectedMockArgs1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame2-knee_JC2-vsk2-mockReturnVal2-expectedMockArgs2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_ankleJointCenter[frame4-knee_JC4-vsk4-mockReturnVal4-expectedMockArgs4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:665: RuntimeWarning: invalid value encountered in true_divide
    L_ankle_z_axis = [L_ankle_z_axis[0]/L_ankle_z_axis_div,L_ankle_z_axis[1]/L_ankle_z_axis_div,L_ankle_z_axis[2]/L_ankle_z_axis_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame1-vsk1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame3-vsk3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame5-vsk5-ankle_JC5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:821: RuntimeWarning: invalid value encountered in true_divide
    R_axis_z = [R_axis_z[0]/R_axis_z_div,R_axis_z[1]/R_axis_z_div,R_axis_z[2]/R_axis_z_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame1-vsk1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame2-vsk2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame3-vsk3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame7-vsk7-ankle_JC7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:826: RuntimeWarning: invalid value encountered in true_divide
    y_flex_R = [y_flex_R[0]/y_flex_R_div,y_flex_R[1]/y_flex_R_div,y_flex_R[2]/y_flex_R_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame1-vsk1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame3-vsk3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame5-vsk5-ankle_JC5-expected5]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:845: RuntimeWarning: invalid value encountered in true_divide
    L_axis_z = [L_axis_z[0]/L_axis_z_div,L_axis_z[1]/L_axis_z_div,L_axis_z[2]/L_axis_z_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame1-vsk1-ankle_JC1-expected1]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame2-vsk2-ankle_JC2-expected2]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame3-vsk3-ankle_JC3-expected3]
pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame7-vsk7-ankle_JC7-expected7]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:850: RuntimeWarning: invalid value encountered in true_divide
    y_flex_L = [y_flex_L[0]/y_flex_L_div,y_flex_L[1]/y_flex_L_div,y_flex_L[2]/y_flex_L_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame4-vsk4-ankle_JC4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:831: RuntimeWarning: invalid value encountered in double_scalars
    R_axis_x = [R_axis_x[0]/R_axis_x_div,R_axis_x[1]/R_axis_x_div,R_axis_x[2]/R_axis_x_div]

pyCGM_Single/tests/test_pycgm_axis.py::TestLowerBodyAxis::test_footJointCenter[frame4-vsk4-ankle_JC4-expected4]
  a:\pycgm\env38\lib\site-packages\pycgm-0.0.1b0-py3.8.egg\pyCGM_Single\pyCGM.py:855: RuntimeWarning: invalid value encountered in double_scalars
    L_axis_x = [L_axis_x[0]/L_axis_x_div,L_axis_x[1]/L_axis_x_div,L_axis_x[2]/L_axis_x_div]

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables0-0-expected_result0]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables1-1-expected_result1]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables2-2-expected_result2]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables3--1-expected_result3]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables4-10-expected_result4]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_static_SampleData[LFHD-useables5-100-expected_result5]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_mov_SampleData[LFHD-clust0-3-11-expected_result0]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_mov_SampleData[LFHD-clust1-3-12-expected_result1]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_mov_SampleData[LFHD-clust2-3--1-expected_result2]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_mov_SampleData[LFHD-clust3-3-15-expected_result3]
FAILED pyCGM_Single/tests/test_Pipelines.py::TestPipelinesGapFilling::test_transform_from_mov_SampleData[LFHD-clust4-3-100-expected_result4]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[0] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[1] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[2] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[3] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[4] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[5] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[6] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[7] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[8] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[9] - Ass...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[10] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[11] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[12] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[13] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[14] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[15] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[16] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[17] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[18] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[19] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[20] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[21] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[22] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[23] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[24] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[25] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[26] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[27] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[28] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[29] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[30] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[31] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[32] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[33] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[34] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[35] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[36] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[37] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[38] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[39] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[40] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[41] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[42] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[43] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[44] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[45] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[48] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[51] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[52] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[53] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[54] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[55] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_ROM[56] - As...
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[3]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[4]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[5]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[6]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[7]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[8]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[9]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[10]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[11]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[12]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[13]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[14]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[15]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[16]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[17]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[18]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[19]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[20]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[33]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[34]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[35]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[36]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[37]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[38]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[39]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[40]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[41]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[42]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[43]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[44]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[45]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[48]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[51]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[52]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[53]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[54]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[55]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_59993_Frame[56]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[3]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[4]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[5]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[6]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[7]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[8]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[10]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[13]
FAILED pyCGM_Single/tests/test_csvOutput.py::TestCSVOutput::test_Test_Files[36]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcAngles_angles_and_axis[kargs0-1-expected_first_angle0-expected_first_axis0]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcAngles_angles_and_axis[kargs1-2-expected_first_angle1-expected_first_axis1]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcAngles_angles_or_axis[kargs0-57-expected_truncated_results0]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcAngles_angles_or_axis[kargs1-216-expected_truncated_results1]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcAngles_joint_centers
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_Calc_accuracy[0-10-10-expected_first_angles0-expected_LHumerus0]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_Calc_accuracy[1-2-1-expected_first_angles1-expected_LHumerus1]
FAILED pyCGM_Single/tests/test_pycgmCalc.py::TestPycgmCalc::test_calcFrames
FAILED pyCGM_Single/tests/test_pycgmIO.py::TestPycgmIO::test_writeResult[kwargs0-274-truncated_result0]
FAILED pyCGM_Single/tests/test_pycgmIO.py::TestPycgmIO::test_writeResult[kwargs1-217-truncated_result1]
FAILED pyCGM_Single/tests/test_pycgmIO.py::TestPycgmIO::test_writeResult[kwargs2-58-truncated_result2]
FAILED pyCGM_Single/tests/test_pycgmIO.py::TestPycgmIO::test_writeResult[kwargs3-7-truncated_result3]
FAILED pyCGM_Single/tests/test_pycgmIO.py::TestPycgmIO::test_writeResult[kwargs4-7-truncated_result4]
FAILED pyCGM_Single/tests/test_pycgmKinetics.py::Test_pycgmKinetics::test_getKinetics
FAILED pyCGM_Single/tests/test_pycgmStatic_utils.py::TestPycgmStaticGetStatic::test_getStatic_InterAsisDistance
========= 126 failed, 951 passed, 403631 warnings in 78.48s (0:01:18) =========
